# coding: utf-8

"""
    NVD API 2.0 Python API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Contact: 15080890+kannkyo@users.noreply.github.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from nvd_api import schemas  # noqa: F401


class CpeOas(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    JSON Schema for NVD Common Product Enumeration (CPE) API version 2.0
    """


    class MetaOapg:
        required = {
            "startIndex",
            "totalResults",
            "resultsPerPage",
            "format",
            "version",
            "products",
            "timestamp",
        }
        
        class properties:
            resultsPerPage = schemas.IntSchema
            startIndex = schemas.IntSchema
            totalResults = schemas.IntSchema
            format = schemas.StrSchema
            version = schemas.StrSchema
            timestamp = schemas.DateTimeSchema
            
            
            class products(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "cpe",
                            }
                            
                            class properties:
                                
                                
                                class cpe(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        required = {
                                            "created",
                                            "deprecated",
                                            "cpeName",
                                            "lastModified",
                                            "cpeNameId",
                                        }
                                        
                                        class properties:
                                            deprecated = schemas.BoolSchema
                                            cpeName = schemas.StrSchema
                                            cpeNameId = schemas.UUIDSchema
                                            created = schemas.DateTimeSchema
                                            lastModified = schemas.DateTimeSchema
                                            
                                            
                                            class titles(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    
                                                    class items(
                                                        schemas.DictSchema
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            required = {
                                                                "lang",
                                                                "title",
                                                            }
                                                            
                                                            class properties:
                                                                title = schemas.StrSchema
                                                                lang = schemas.StrSchema
                                                                __annotations__ = {
                                                                    "title": title,
                                                                    "lang": lang,
                                                                }
                                                            additional_properties = schemas.NotAnyTypeSchema
                                                        
                                                        lang: MetaOapg.properties.lang
                                                        title: MetaOapg.properties.title
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["lang"]) -> MetaOapg.properties.lang: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
                                                        
                                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["lang"], typing_extensions.Literal["title"], ]):
                                                            # dict_instance[name] accessor
                                                            return super().__getitem__(name)
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["lang"]) -> MetaOapg.properties.lang: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
                                                        
                                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["lang"], typing_extensions.Literal["title"], ]):
                                                            return super().get_item_oapg(name)
                                                    
                                                        def __new__(
                                                            cls,
                                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                                            lang: typing.Union[MetaOapg.properties.lang, str, ],
                                                            title: typing.Union[MetaOapg.properties.title, str, ],
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                        ) -> 'items':
                                                            return super().__new__(
                                                                cls,
                                                                *args,
                                                                lang=lang,
                                                                title=title,
                                                                _configuration=_configuration,
                                                            )
                                            
                                                def __new__(
                                                    cls,
                                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'titles':
                                                    return super().__new__(
                                                        cls,
                                                        arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class refs(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    
                                                    class items(
                                                        schemas.DictSchema
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            required = {
                                                                "ref",
                                                            }
                                                            
                                                            class properties:
                                                                
                                                                
                                                                class ref(
                                                                    schemas.StrSchema
                                                                ):
                                                                    pass
                                                                
                                                                
                                                                class type(
                                                                    schemas.EnumBase,
                                                                    schemas.StrSchema
                                                                ):
                                                                    
                                                                    @schemas.classproperty
                                                                    def ADVISORY(cls):
                                                                        return cls("Advisory")
                                                                    
                                                                    @schemas.classproperty
                                                                    def CHANGE_LOG(cls):
                                                                        return cls("Change Log")
                                                                    
                                                                    @schemas.classproperty
                                                                    def PRODUCT(cls):
                                                                        return cls("Product")
                                                                    
                                                                    @schemas.classproperty
                                                                    def PROJECT(cls):
                                                                        return cls("Project")
                                                                    
                                                                    @schemas.classproperty
                                                                    def VENDOR(cls):
                                                                        return cls("Vendor")
                                                                    
                                                                    @schemas.classproperty
                                                                    def VERSION(cls):
                                                                        return cls("Version")
                                                                __annotations__ = {
                                                                    "ref": ref,
                                                                    "type": type,
                                                                }
                                                            additional_properties = schemas.NotAnyTypeSchema
                                                        
                                                        ref: MetaOapg.properties.ref
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["ref"]) -> MetaOapg.properties.ref: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                                        
                                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["ref"], typing_extensions.Literal["type"], ]):
                                                            # dict_instance[name] accessor
                                                            return super().__getitem__(name)
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["ref"]) -> MetaOapg.properties.ref: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
                                                        
                                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ref"], typing_extensions.Literal["type"], ]):
                                                            return super().get_item_oapg(name)
                                                    
                                                        def __new__(
                                                            cls,
                                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                                            ref: typing.Union[MetaOapg.properties.ref, str, ],
                                                            type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                        ) -> 'items':
                                                            return super().__new__(
                                                                cls,
                                                                *args,
                                                                ref=ref,
                                                                type=type,
                                                                _configuration=_configuration,
                                                            )
                                            
                                                def __new__(
                                                    cls,
                                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'refs':
                                                    return super().__new__(
                                                        cls,
                                                        arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class deprecatedBy(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    
                                                    class items(
                                                        schemas.DictSchema
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            
                                                            class properties:
                                                                cpeName = schemas.StrSchema
                                                                cpeNameId = schemas.UUIDSchema
                                                                __annotations__ = {
                                                                    "cpeName": cpeName,
                                                                    "cpeNameId": cpeNameId,
                                                                }
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["cpeName"]) -> MetaOapg.properties.cpeName: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["cpeNameId"]) -> MetaOapg.properties.cpeNameId: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                        
                                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["cpeName", "cpeNameId", ], str]):
                                                            # dict_instance[name] accessor
                                                            return super().__getitem__(name)
                                                        
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["cpeName"]) -> typing.Union[MetaOapg.properties.cpeName, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["cpeNameId"]) -> typing.Union[MetaOapg.properties.cpeNameId, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                        
                                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cpeName", "cpeNameId", ], str]):
                                                            return super().get_item_oapg(name)
                                                        
                                                    
                                                        def __new__(
                                                            cls,
                                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                                            cpeName: typing.Union[MetaOapg.properties.cpeName, str, schemas.Unset] = schemas.unset,
                                                            cpeNameId: typing.Union[MetaOapg.properties.cpeNameId, str, uuid.UUID, schemas.Unset] = schemas.unset,
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                        ) -> 'items':
                                                            return super().__new__(
                                                                cls,
                                                                *args,
                                                                cpeName=cpeName,
                                                                cpeNameId=cpeNameId,
                                                                _configuration=_configuration,
                                                                **kwargs,
                                                            )
                                            
                                                def __new__(
                                                    cls,
                                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'deprecatedBy':
                                                    return super().__new__(
                                                        cls,
                                                        arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            __annotations__ = {
                                                "deprecated": deprecated,
                                                "cpeName": cpeName,
                                                "cpeNameId": cpeNameId,
                                                "created": created,
                                                "lastModified": lastModified,
                                                "titles": titles,
                                                "refs": refs,
                                                "deprecatedBy": deprecatedBy,
                                            }
                                        additional_properties = schemas.NotAnyTypeSchema
                                    
                                    created: MetaOapg.properties.created
                                    deprecated: MetaOapg.properties.deprecated
                                    cpeName: MetaOapg.properties.cpeName
                                    lastModified: MetaOapg.properties.lastModified
                                    cpeNameId: MetaOapg.properties.cpeNameId
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["deprecated"]) -> MetaOapg.properties.deprecated: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["cpeName"]) -> MetaOapg.properties.cpeName: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["lastModified"]) -> MetaOapg.properties.lastModified: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["cpeNameId"]) -> MetaOapg.properties.cpeNameId: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["titles"]) -> MetaOapg.properties.titles: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["refs"]) -> MetaOapg.properties.refs: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["deprecatedBy"]) -> MetaOapg.properties.deprecatedBy: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["created"], typing_extensions.Literal["deprecated"], typing_extensions.Literal["cpeName"], typing_extensions.Literal["lastModified"], typing_extensions.Literal["cpeNameId"], typing_extensions.Literal["titles"], typing_extensions.Literal["refs"], typing_extensions.Literal["deprecatedBy"], ]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["deprecated"]) -> MetaOapg.properties.deprecated: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["cpeName"]) -> MetaOapg.properties.cpeName: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["lastModified"]) -> MetaOapg.properties.lastModified: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["cpeNameId"]) -> MetaOapg.properties.cpeNameId: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["titles"]) -> typing.Union[MetaOapg.properties.titles, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["refs"]) -> typing.Union[MetaOapg.properties.refs, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["deprecatedBy"]) -> typing.Union[MetaOapg.properties.deprecatedBy, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["created"], typing_extensions.Literal["deprecated"], typing_extensions.Literal["cpeName"], typing_extensions.Literal["lastModified"], typing_extensions.Literal["cpeNameId"], typing_extensions.Literal["titles"], typing_extensions.Literal["refs"], typing_extensions.Literal["deprecatedBy"], ]):
                                        return super().get_item_oapg(name)
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        created: typing.Union[MetaOapg.properties.created, str, datetime, ],
                                        deprecated: typing.Union[MetaOapg.properties.deprecated, bool, ],
                                        cpeName: typing.Union[MetaOapg.properties.cpeName, str, ],
                                        lastModified: typing.Union[MetaOapg.properties.lastModified, str, datetime, ],
                                        cpeNameId: typing.Union[MetaOapg.properties.cpeNameId, str, uuid.UUID, ],
                                        titles: typing.Union[MetaOapg.properties.titles, list, tuple, schemas.Unset] = schemas.unset,
                                        refs: typing.Union[MetaOapg.properties.refs, list, tuple, schemas.Unset] = schemas.unset,
                                        deprecatedBy: typing.Union[MetaOapg.properties.deprecatedBy, list, tuple, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'cpe':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            created=created,
                                            deprecated=deprecated,
                                            cpeName=cpeName,
                                            lastModified=lastModified,
                                            cpeNameId=cpeNameId,
                                            titles=titles,
                                            refs=refs,
                                            deprecatedBy=deprecatedBy,
                                            _configuration=_configuration,
                                        )
                                __annotations__ = {
                                    "cpe": cpe,
                                }
                            additional_properties = schemas.NotAnyTypeSchema
                        
                        cpe: MetaOapg.properties.cpe
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["cpe"]) -> MetaOapg.properties.cpe: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["cpe"], ]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["cpe"]) -> MetaOapg.properties.cpe: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cpe"], ]):
                            return super().get_item_oapg(name)
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            cpe: typing.Union[MetaOapg.properties.cpe, dict, frozendict.frozendict, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                cpe=cpe,
                                _configuration=_configuration,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'products':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "resultsPerPage": resultsPerPage,
                "startIndex": startIndex,
                "totalResults": totalResults,
                "format": format,
                "version": version,
                "timestamp": timestamp,
                "products": products,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    startIndex: MetaOapg.properties.startIndex
    totalResults: MetaOapg.properties.totalResults
    resultsPerPage: MetaOapg.properties.resultsPerPage
    format: MetaOapg.properties.format
    version: MetaOapg.properties.version
    products: MetaOapg.properties.products
    timestamp: MetaOapg.properties.timestamp
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startIndex"]) -> MetaOapg.properties.startIndex: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalResults"]) -> MetaOapg.properties.totalResults: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resultsPerPage"]) -> MetaOapg.properties.resultsPerPage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["format"]) -> MetaOapg.properties.format: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["products"]) -> MetaOapg.properties.products: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["startIndex"], typing_extensions.Literal["totalResults"], typing_extensions.Literal["resultsPerPage"], typing_extensions.Literal["format"], typing_extensions.Literal["version"], typing_extensions.Literal["products"], typing_extensions.Literal["timestamp"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startIndex"]) -> MetaOapg.properties.startIndex: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalResults"]) -> MetaOapg.properties.totalResults: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resultsPerPage"]) -> MetaOapg.properties.resultsPerPage: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["format"]) -> MetaOapg.properties.format: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["products"]) -> MetaOapg.properties.products: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["startIndex"], typing_extensions.Literal["totalResults"], typing_extensions.Literal["resultsPerPage"], typing_extensions.Literal["format"], typing_extensions.Literal["version"], typing_extensions.Literal["products"], typing_extensions.Literal["timestamp"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        startIndex: typing.Union[MetaOapg.properties.startIndex, decimal.Decimal, int, ],
        totalResults: typing.Union[MetaOapg.properties.totalResults, decimal.Decimal, int, ],
        resultsPerPage: typing.Union[MetaOapg.properties.resultsPerPage, decimal.Decimal, int, ],
        format: typing.Union[MetaOapg.properties.format, str, ],
        version: typing.Union[MetaOapg.properties.version, str, ],
        products: typing.Union[MetaOapg.properties.products, list, tuple, ],
        timestamp: typing.Union[MetaOapg.properties.timestamp, str, datetime, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CpeOas':
        return super().__new__(
            cls,
            *args,
            startIndex=startIndex,
            totalResults=totalResults,
            resultsPerPage=resultsPerPage,
            format=format,
            version=version,
            products=products,
            timestamp=timestamp,
            _configuration=_configuration,
        )

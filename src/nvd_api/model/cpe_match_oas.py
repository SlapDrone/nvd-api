# coding: utf-8

"""
    NVD API 2.0 Python API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Contact: 15080890+kannkyo@users.noreply.github.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from nvd_api import schemas  # noqa: F401


class CpeMatchOas(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    JSON Schema for NVD CVE Applicability Statement CPE Match API version 2.0
    """


    class MetaOapg:
        required = {
            "startIndex",
            "totalResults",
            "resultsPerPage",
            "format",
            "version",
            "matchStrings",
            "timestamp",
        }
        
        class properties:
            resultsPerPage = schemas.IntSchema
            startIndex = schemas.IntSchema
            totalResults = schemas.IntSchema
            format = schemas.StrSchema
            version = schemas.StrSchema
            timestamp = schemas.DateTimeSchema
            
            
            class matchStrings(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "created",
                                "criteria",
                                "lastModified",
                                "matchCriteriaId",
                                "status",
                            }
                            
                            class properties:
                                criteria = schemas.StrSchema
                                matchCriteriaId = schemas.UUIDSchema
                                versionStartExcluding = schemas.StrSchema
                                versionStartIncluding = schemas.StrSchema
                                versionEndExcluding = schemas.StrSchema
                                versionEndIncluding = schemas.StrSchema
                                created = schemas.DateTimeSchema
                                lastModified = schemas.DateTimeSchema
                                cpeLastModified = schemas.DateTimeSchema
                                status = schemas.StrSchema
                                
                                
                                class matches(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class items(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                required = {
                                                    "cpeName",
                                                    "cpeNameId",
                                                }
                                                
                                                class properties:
                                                    cpeName = schemas.StrSchema
                                                    cpeNameId = schemas.UUIDSchema
                                                    __annotations__ = {
                                                        "cpeName": cpeName,
                                                        "cpeNameId": cpeNameId,
                                                    }
                                                additional_properties = schemas.NotAnyTypeSchema
                                            
                                            cpeName: MetaOapg.properties.cpeName
                                            cpeNameId: MetaOapg.properties.cpeNameId
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["cpeName"]) -> MetaOapg.properties.cpeName: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["cpeNameId"]) -> MetaOapg.properties.cpeNameId: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["cpeName"], typing_extensions.Literal["cpeNameId"], ]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["cpeName"]) -> MetaOapg.properties.cpeName: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["cpeNameId"]) -> MetaOapg.properties.cpeNameId: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cpeName"], typing_extensions.Literal["cpeNameId"], ]):
                                                return super().get_item_oapg(name)
                                        
                                            def __new__(
                                                cls,
                                                *args: typing.Union[dict, frozendict.frozendict, ],
                                                cpeName: typing.Union[MetaOapg.properties.cpeName, str, ],
                                                cpeNameId: typing.Union[MetaOapg.properties.cpeNameId, str, uuid.UUID, ],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                            ) -> 'items':
                                                return super().__new__(
                                                    cls,
                                                    *args,
                                                    cpeName=cpeName,
                                                    cpeNameId=cpeNameId,
                                                    _configuration=_configuration,
                                                )
                                
                                    def __new__(
                                        cls,
                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'matches':
                                        return super().__new__(
                                            cls,
                                            arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                __annotations__ = {
                                    "criteria": criteria,
                                    "matchCriteriaId": matchCriteriaId,
                                    "versionStartExcluding": versionStartExcluding,
                                    "versionStartIncluding": versionStartIncluding,
                                    "versionEndExcluding": versionEndExcluding,
                                    "versionEndIncluding": versionEndIncluding,
                                    "created": created,
                                    "lastModified": lastModified,
                                    "cpeLastModified": cpeLastModified,
                                    "status": status,
                                    "matches": matches,
                                }
                            additional_properties = schemas.NotAnyTypeSchema
                        
                        created: MetaOapg.properties.created
                        criteria: MetaOapg.properties.criteria
                        lastModified: MetaOapg.properties.lastModified
                        matchCriteriaId: MetaOapg.properties.matchCriteriaId
                        status: MetaOapg.properties.status
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["criteria"]) -> MetaOapg.properties.criteria: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["lastModified"]) -> MetaOapg.properties.lastModified: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["matchCriteriaId"]) -> MetaOapg.properties.matchCriteriaId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["versionStartExcluding"]) -> MetaOapg.properties.versionStartExcluding: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["versionStartIncluding"]) -> MetaOapg.properties.versionStartIncluding: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["versionEndExcluding"]) -> MetaOapg.properties.versionEndExcluding: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["versionEndIncluding"]) -> MetaOapg.properties.versionEndIncluding: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["cpeLastModified"]) -> MetaOapg.properties.cpeLastModified: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["matches"]) -> MetaOapg.properties.matches: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["created"], typing_extensions.Literal["criteria"], typing_extensions.Literal["lastModified"], typing_extensions.Literal["matchCriteriaId"], typing_extensions.Literal["status"], typing_extensions.Literal["versionStartExcluding"], typing_extensions.Literal["versionStartIncluding"], typing_extensions.Literal["versionEndExcluding"], typing_extensions.Literal["versionEndIncluding"], typing_extensions.Literal["cpeLastModified"], typing_extensions.Literal["matches"], ]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["criteria"]) -> MetaOapg.properties.criteria: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["lastModified"]) -> MetaOapg.properties.lastModified: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["matchCriteriaId"]) -> MetaOapg.properties.matchCriteriaId: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["versionStartExcluding"]) -> typing.Union[MetaOapg.properties.versionStartExcluding, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["versionStartIncluding"]) -> typing.Union[MetaOapg.properties.versionStartIncluding, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["versionEndExcluding"]) -> typing.Union[MetaOapg.properties.versionEndExcluding, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["versionEndIncluding"]) -> typing.Union[MetaOapg.properties.versionEndIncluding, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["cpeLastModified"]) -> typing.Union[MetaOapg.properties.cpeLastModified, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["matches"]) -> typing.Union[MetaOapg.properties.matches, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["created"], typing_extensions.Literal["criteria"], typing_extensions.Literal["lastModified"], typing_extensions.Literal["matchCriteriaId"], typing_extensions.Literal["status"], typing_extensions.Literal["versionStartExcluding"], typing_extensions.Literal["versionStartIncluding"], typing_extensions.Literal["versionEndExcluding"], typing_extensions.Literal["versionEndIncluding"], typing_extensions.Literal["cpeLastModified"], typing_extensions.Literal["matches"], ]):
                            return super().get_item_oapg(name)
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            created: typing.Union[MetaOapg.properties.created, str, datetime, ],
                            criteria: typing.Union[MetaOapg.properties.criteria, str, ],
                            lastModified: typing.Union[MetaOapg.properties.lastModified, str, datetime, ],
                            matchCriteriaId: typing.Union[MetaOapg.properties.matchCriteriaId, str, uuid.UUID, ],
                            status: typing.Union[MetaOapg.properties.status, str, ],
                            versionStartExcluding: typing.Union[MetaOapg.properties.versionStartExcluding, str, schemas.Unset] = schemas.unset,
                            versionStartIncluding: typing.Union[MetaOapg.properties.versionStartIncluding, str, schemas.Unset] = schemas.unset,
                            versionEndExcluding: typing.Union[MetaOapg.properties.versionEndExcluding, str, schemas.Unset] = schemas.unset,
                            versionEndIncluding: typing.Union[MetaOapg.properties.versionEndIncluding, str, schemas.Unset] = schemas.unset,
                            cpeLastModified: typing.Union[MetaOapg.properties.cpeLastModified, str, datetime, schemas.Unset] = schemas.unset,
                            matches: typing.Union[MetaOapg.properties.matches, list, tuple, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                created=created,
                                criteria=criteria,
                                lastModified=lastModified,
                                matchCriteriaId=matchCriteriaId,
                                status=status,
                                versionStartExcluding=versionStartExcluding,
                                versionStartIncluding=versionStartIncluding,
                                versionEndExcluding=versionEndExcluding,
                                versionEndIncluding=versionEndIncluding,
                                cpeLastModified=cpeLastModified,
                                matches=matches,
                                _configuration=_configuration,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'matchStrings':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "resultsPerPage": resultsPerPage,
                "startIndex": startIndex,
                "totalResults": totalResults,
                "format": format,
                "version": version,
                "timestamp": timestamp,
                "matchStrings": matchStrings,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    startIndex: MetaOapg.properties.startIndex
    totalResults: MetaOapg.properties.totalResults
    resultsPerPage: MetaOapg.properties.resultsPerPage
    format: MetaOapg.properties.format
    version: MetaOapg.properties.version
    matchStrings: MetaOapg.properties.matchStrings
    timestamp: MetaOapg.properties.timestamp
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startIndex"]) -> MetaOapg.properties.startIndex: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalResults"]) -> MetaOapg.properties.totalResults: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resultsPerPage"]) -> MetaOapg.properties.resultsPerPage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["format"]) -> MetaOapg.properties.format: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["matchStrings"]) -> MetaOapg.properties.matchStrings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["startIndex"], typing_extensions.Literal["totalResults"], typing_extensions.Literal["resultsPerPage"], typing_extensions.Literal["format"], typing_extensions.Literal["version"], typing_extensions.Literal["matchStrings"], typing_extensions.Literal["timestamp"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startIndex"]) -> MetaOapg.properties.startIndex: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalResults"]) -> MetaOapg.properties.totalResults: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resultsPerPage"]) -> MetaOapg.properties.resultsPerPage: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["format"]) -> MetaOapg.properties.format: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["matchStrings"]) -> MetaOapg.properties.matchStrings: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["startIndex"], typing_extensions.Literal["totalResults"], typing_extensions.Literal["resultsPerPage"], typing_extensions.Literal["format"], typing_extensions.Literal["version"], typing_extensions.Literal["matchStrings"], typing_extensions.Literal["timestamp"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        startIndex: typing.Union[MetaOapg.properties.startIndex, decimal.Decimal, int, ],
        totalResults: typing.Union[MetaOapg.properties.totalResults, decimal.Decimal, int, ],
        resultsPerPage: typing.Union[MetaOapg.properties.resultsPerPage, decimal.Decimal, int, ],
        format: typing.Union[MetaOapg.properties.format, str, ],
        version: typing.Union[MetaOapg.properties.version, str, ],
        matchStrings: typing.Union[MetaOapg.properties.matchStrings, list, tuple, ],
        timestamp: typing.Union[MetaOapg.properties.timestamp, str, datetime, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CpeMatchOas':
        return super().__new__(
            cls,
            *args,
            startIndex=startIndex,
            totalResults=totalResults,
            resultsPerPage=resultsPerPage,
            format=format,
            version=version,
            matchStrings=matchStrings,
            timestamp=timestamp,
            _configuration=_configuration,
        )

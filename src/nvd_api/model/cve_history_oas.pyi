# coding: utf-8

"""
    NVD API 2.0 Python API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Contact: 15080890+kannkyo@users.noreply.github.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from nvd_api import schemas  # noqa: F401


class CveHistoryOas(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    JSON Schema for NVD CVE History API version 2.0
    """


    class MetaOapg:
        required = {
            "startIndex",
            "totalResults",
            "resultsPerPage",
            "format",
            "version",
            "timestamp",
        }
        
        class properties:
            resultsPerPage = schemas.IntSchema
            startIndex = schemas.IntSchema
            totalResults = schemas.IntSchema
            format = schemas.StrSchema
            version = schemas.StrSchema
            timestamp = schemas.DateTimeSchema
            
            
            class cveChanges(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "change",
                            }
                            
                            class properties:
                                
                                
                                class change(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        required = {
                                            "sourceIdentifier",
                                            "cveId",
                                            "eventName",
                                            "cveChangeId",
                                        }
                                        
                                        class properties:
                                            
                                            
                                            class cveId(
                                                schemas.StrSchema
                                            ):
                                                pass
                                            eventName = schemas.StrSchema
                                            cveChangeId = schemas.UUIDSchema
                                            sourceIdentifier = schemas.StrSchema
                                            created = schemas.DateTimeSchema
                                            
                                            
                                            class details(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    
                                                    class items(
                                                        schemas.DictSchema
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            required = {
                                                                "type",
                                                            }
                                                            
                                                            class properties:
                                                                action = schemas.StrSchema
                                                                type = schemas.StrSchema
                                                                oldValue = schemas.StrSchema
                                                                newValue = schemas.StrSchema
                                                                __annotations__ = {
                                                                    "action": action,
                                                                    "type": type,
                                                                    "oldValue": oldValue,
                                                                    "newValue": newValue,
                                                                }
                                                            additional_properties = schemas.NotAnyTypeSchema
                                                        
                                                        type: MetaOapg.properties.type
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["action"]) -> MetaOapg.properties.action: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["oldValue"]) -> MetaOapg.properties.oldValue: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["newValue"]) -> MetaOapg.properties.newValue: ...
                                                        
                                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["type"], typing_extensions.Literal["action"], typing_extensions.Literal["oldValue"], typing_extensions.Literal["newValue"], ]):
                                                            # dict_instance[name] accessor
                                                            return super().__getitem__(name)
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["action"]) -> typing.Union[MetaOapg.properties.action, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["oldValue"]) -> typing.Union[MetaOapg.properties.oldValue, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["newValue"]) -> typing.Union[MetaOapg.properties.newValue, schemas.Unset]: ...
                                                        
                                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type"], typing_extensions.Literal["action"], typing_extensions.Literal["oldValue"], typing_extensions.Literal["newValue"], ]):
                                                            return super().get_item_oapg(name)
                                                    
                                                        def __new__(
                                                            cls,
                                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                                            type: typing.Union[MetaOapg.properties.type, str, ],
                                                            action: typing.Union[MetaOapg.properties.action, str, schemas.Unset] = schemas.unset,
                                                            oldValue: typing.Union[MetaOapg.properties.oldValue, str, schemas.Unset] = schemas.unset,
                                                            newValue: typing.Union[MetaOapg.properties.newValue, str, schemas.Unset] = schemas.unset,
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                        ) -> 'items':
                                                            return super().__new__(
                                                                cls,
                                                                *args,
                                                                type=type,
                                                                action=action,
                                                                oldValue=oldValue,
                                                                newValue=newValue,
                                                                _configuration=_configuration,
                                                            )
                                            
                                                def __new__(
                                                    cls,
                                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'details':
                                                    return super().__new__(
                                                        cls,
                                                        arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            __annotations__ = {
                                                "cveId": cveId,
                                                "eventName": eventName,
                                                "cveChangeId": cveChangeId,
                                                "sourceIdentifier": sourceIdentifier,
                                                "created": created,
                                                "details": details,
                                            }
                                        additional_properties = schemas.NotAnyTypeSchema
                                    
                                    sourceIdentifier: MetaOapg.properties.sourceIdentifier
                                    cveId: MetaOapg.properties.cveId
                                    eventName: MetaOapg.properties.eventName
                                    cveChangeId: MetaOapg.properties.cveChangeId
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["sourceIdentifier"]) -> MetaOapg.properties.sourceIdentifier: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["cveId"]) -> MetaOapg.properties.cveId: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["eventName"]) -> MetaOapg.properties.eventName: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["cveChangeId"]) -> MetaOapg.properties.cveChangeId: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["details"]) -> MetaOapg.properties.details: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["sourceIdentifier"], typing_extensions.Literal["cveId"], typing_extensions.Literal["eventName"], typing_extensions.Literal["cveChangeId"], typing_extensions.Literal["created"], typing_extensions.Literal["details"], ]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["sourceIdentifier"]) -> MetaOapg.properties.sourceIdentifier: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["cveId"]) -> MetaOapg.properties.cveId: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["eventName"]) -> MetaOapg.properties.eventName: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["cveChangeId"]) -> MetaOapg.properties.cveChangeId: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["details"]) -> typing.Union[MetaOapg.properties.details, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["sourceIdentifier"], typing_extensions.Literal["cveId"], typing_extensions.Literal["eventName"], typing_extensions.Literal["cveChangeId"], typing_extensions.Literal["created"], typing_extensions.Literal["details"], ]):
                                        return super().get_item_oapg(name)
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        sourceIdentifier: typing.Union[MetaOapg.properties.sourceIdentifier, str, ],
                                        cveId: typing.Union[MetaOapg.properties.cveId, str, ],
                                        eventName: typing.Union[MetaOapg.properties.eventName, str, ],
                                        cveChangeId: typing.Union[MetaOapg.properties.cveChangeId, str, uuid.UUID, ],
                                        created: typing.Union[MetaOapg.properties.created, str, datetime, schemas.Unset] = schemas.unset,
                                        details: typing.Union[MetaOapg.properties.details, list, tuple, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'change':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            sourceIdentifier=sourceIdentifier,
                                            cveId=cveId,
                                            eventName=eventName,
                                            cveChangeId=cveChangeId,
                                            created=created,
                                            details=details,
                                            _configuration=_configuration,
                                        )
                                __annotations__ = {
                                    "change": change,
                                }
                            additional_properties = schemas.NotAnyTypeSchema
                        
                        change: MetaOapg.properties.change
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["change"]) -> MetaOapg.properties.change: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["change"], ]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["change"]) -> MetaOapg.properties.change: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["change"], ]):
                            return super().get_item_oapg(name)
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            change: typing.Union[MetaOapg.properties.change, dict, frozendict.frozendict, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                change=change,
                                _configuration=_configuration,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cveChanges':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "resultsPerPage": resultsPerPage,
                "startIndex": startIndex,
                "totalResults": totalResults,
                "format": format,
                "version": version,
                "timestamp": timestamp,
                "cveChanges": cveChanges,
            }
    
    startIndex: MetaOapg.properties.startIndex
    totalResults: MetaOapg.properties.totalResults
    resultsPerPage: MetaOapg.properties.resultsPerPage
    format: MetaOapg.properties.format
    version: MetaOapg.properties.version
    timestamp: MetaOapg.properties.timestamp
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resultsPerPage"]) -> MetaOapg.properties.resultsPerPage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startIndex"]) -> MetaOapg.properties.startIndex: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalResults"]) -> MetaOapg.properties.totalResults: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["format"]) -> MetaOapg.properties.format: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cveChanges"]) -> MetaOapg.properties.cveChanges: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["resultsPerPage", "startIndex", "totalResults", "format", "version", "timestamp", "cveChanges", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resultsPerPage"]) -> MetaOapg.properties.resultsPerPage: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startIndex"]) -> MetaOapg.properties.startIndex: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalResults"]) -> MetaOapg.properties.totalResults: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["format"]) -> MetaOapg.properties.format: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cveChanges"]) -> typing.Union[MetaOapg.properties.cveChanges, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["resultsPerPage", "startIndex", "totalResults", "format", "version", "timestamp", "cveChanges", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        startIndex: typing.Union[MetaOapg.properties.startIndex, decimal.Decimal, int, ],
        totalResults: typing.Union[MetaOapg.properties.totalResults, decimal.Decimal, int, ],
        resultsPerPage: typing.Union[MetaOapg.properties.resultsPerPage, decimal.Decimal, int, ],
        format: typing.Union[MetaOapg.properties.format, str, ],
        version: typing.Union[MetaOapg.properties.version, str, ],
        timestamp: typing.Union[MetaOapg.properties.timestamp, str, datetime, ],
        cveChanges: typing.Union[MetaOapg.properties.cveChanges, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CveHistoryOas':
        return super().__new__(
            cls,
            *args,
            startIndex=startIndex,
            totalResults=totalResults,
            resultsPerPage=resultsPerPage,
            format=format,
            version=version,
            timestamp=timestamp,
            cveChanges=cveChanges,
            _configuration=_configuration,
            **kwargs,
        )

# coding: utf-8

"""
    NVD API 2.0 Python API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Contact: 15080890+kannkyo@users.noreply.github.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from nvd_api import schemas  # noqa: F401


class CveOas(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    JSON Schema for NVD Vulnerability Data API version 2.0
    """


    class MetaOapg:
        required = {
            "startIndex",
            "totalResults",
            "resultsPerPage",
            "format",
            "vulnerabilities",
            "version",
            "timestamp",
        }
        
        class properties:
            resultsPerPage = schemas.IntSchema
            startIndex = schemas.IntSchema
            totalResults = schemas.IntSchema
            format = schemas.StrSchema
            version = schemas.StrSchema
            timestamp = schemas.DateTimeSchema
            
            
            class vulnerabilities(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "cve",
                            }
                            
                            class properties:
                                
                                
                                class cve(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        required = {
                                            "references",
                                            "descriptions",
                                        }
                                        
                                        class properties:
                                            
                                            
                                            class id(
                                                schemas.StrSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    regex=[{
                                                        'pattern': r'^CVE-[0-9]{4}-[0-9]{4,}$',  # noqa: E501
                                                    }]
                                            sourceIdentifier = schemas.StrSchema
                                            vulnStatus = schemas.StrSchema
                                            published = schemas.DateTimeSchema
                                            lastModified = schemas.DateTimeSchema
                                            evaluatorComment = schemas.StrSchema
                                            evaluatorSolution = schemas.StrSchema
                                            evaluatorImpact = schemas.StrSchema
                                            cisaExploitAdd = schemas.DateSchema
                                            cisaActionDue = schemas.DateSchema
                                            cisaRequiredAction = schemas.StrSchema
                                            cisaVulnerabilityName = schemas.StrSchema
                                            
                                            
                                            class descriptions(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    min_items = 1
                                                    
                                                    
                                                    class items(
                                                        schemas.DictSchema
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            required = {
                                                                "lang",
                                                                "value",
                                                            }
                                                            
                                                            class properties:
                                                                lang = schemas.StrSchema
                                                                
                                                                
                                                                class value(
                                                                    schemas.StrSchema
                                                                ):
                                                                
                                                                
                                                                    class MetaOapg:
                                                                        max_length = 4096
                                                                __annotations__ = {
                                                                    "lang": lang,
                                                                    "value": value,
                                                                }
                                                            additional_properties = schemas.NotAnyTypeSchema
                                                        
                                                        lang: MetaOapg.properties.lang
                                                        value: MetaOapg.properties.value
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["lang"]) -> MetaOapg.properties.lang: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                                                        
                                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["lang"], typing_extensions.Literal["value"], ]):
                                                            # dict_instance[name] accessor
                                                            return super().__getitem__(name)
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["lang"]) -> MetaOapg.properties.lang: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                                                        
                                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["lang"], typing_extensions.Literal["value"], ]):
                                                            return super().get_item_oapg(name)
                                                    
                                                        def __new__(
                                                            cls,
                                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                                            lang: typing.Union[MetaOapg.properties.lang, str, ],
                                                            value: typing.Union[MetaOapg.properties.value, str, ],
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                        ) -> 'items':
                                                            return super().__new__(
                                                                cls,
                                                                *args,
                                                                lang=lang,
                                                                value=value,
                                                                _configuration=_configuration,
                                                            )
                                            
                                                def __new__(
                                                    cls,
                                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'descriptions':
                                                    return super().__new__(
                                                        cls,
                                                        arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class references(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    max_items = 500
                                                    min_items = 0
                                                    
                                                    
                                                    class items(
                                                        schemas.DictSchema
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            required = {
                                                                "url",
                                                            }
                                                            
                                                            class properties:
                                                                
                                                                
                                                                class url(
                                                                    schemas.StrSchema
                                                                ):
                                                                
                                                                
                                                                    class MetaOapg:
                                                                        max_length = 500
                                                                        regex=[{
                                                                            'pattern': r'^(ftp|http)s?://\S+$',  # noqa: E501
                                                                        }]
                                                                source = schemas.StrSchema
                                                                
                                                                
                                                                class tags(
                                                                    schemas.ListSchema
                                                                ):
                                                                
                                                                
                                                                    class MetaOapg:
                                                                        items = schemas.StrSchema
                                                                
                                                                    def __new__(
                                                                        cls,
                                                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                                    ) -> 'tags':
                                                                        return super().__new__(
                                                                            cls,
                                                                            arg,
                                                                            _configuration=_configuration,
                                                                        )
                                                                
                                                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                                                        return super().__getitem__(i)
                                                                __annotations__ = {
                                                                    "url": url,
                                                                    "source": source,
                                                                    "tags": tags,
                                                                }
                                                            additional_properties = schemas.NotAnyTypeSchema
                                                        
                                                        url: MetaOapg.properties.url
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
                                                        
                                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["url"], typing_extensions.Literal["source"], typing_extensions.Literal["tags"], ]):
                                                            # dict_instance[name] accessor
                                                            return super().__getitem__(name)
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union[MetaOapg.properties.source, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union[MetaOapg.properties.tags, schemas.Unset]: ...
                                                        
                                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["url"], typing_extensions.Literal["source"], typing_extensions.Literal["tags"], ]):
                                                            return super().get_item_oapg(name)
                                                    
                                                        def __new__(
                                                            cls,
                                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                                            url: typing.Union[MetaOapg.properties.url, str, ],
                                                            source: typing.Union[MetaOapg.properties.source, str, schemas.Unset] = schemas.unset,
                                                            tags: typing.Union[MetaOapg.properties.tags, list, tuple, schemas.Unset] = schemas.unset,
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                        ) -> 'items':
                                                            return super().__new__(
                                                                cls,
                                                                *args,
                                                                url=url,
                                                                source=source,
                                                                tags=tags,
                                                                _configuration=_configuration,
                                                            )
                                            
                                                def __new__(
                                                    cls,
                                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'references':
                                                    return super().__new__(
                                                        cls,
                                                        arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class metrics(
                                                schemas.DictSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    class properties:
                                                        
                                                        
                                                        class cvssMetricV31(
                                                            schemas.ListSchema
                                                        ):
                                                        
                                                        
                                                            class MetaOapg:
                                                                
                                                                
                                                                class items(
                                                                    schemas.DictSchema
                                                                ):
                                                                
                                                                
                                                                    class MetaOapg:
                                                                        required = {
                                                                            "cvssData",
                                                                            "source",
                                                                            "type",
                                                                        }
                                                                        
                                                                        class properties:
                                                                            source = schemas.StrSchema
                                                                            type = schemas.DictSchema
                                                                            
                                                                            
                                                                            class cvssData(
                                                                                schemas.DictSchema
                                                                            ):
                                                                            
                                                                            
                                                                                class MetaOapg:
                                                                                    required = {
                                                                                        "baseSeverity",
                                                                                        "baseScore",
                                                                                        "vectorString",
                                                                                        "version",
                                                                                    }
                                                                                    
                                                                                    class properties:
                                                                                        
                                                                                        
                                                                                        class version(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "3.1": "POSITIVE_3_PT_1",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def POSITIVE_3_PT_1(cls):
                                                                                                return cls("3.1")
                                                                                        
                                                                                        
                                                                                        class vectorString(
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                regex=[{
                                                                                                    'pattern': r'^CVSS:3[.]1/((AV:[NALP]|AC:[LH]|PR:[NLH]|UI:[NR]|S:[UC]|[CIA]:[NLH]|E:[XUPFH]|RL:[XOTWU]|RC:[XURC]|[CIA]R:[XLMH]|MAV:[XNALP]|MAC:[XLH]|MPR:[XNLH]|MUI:[XNR]|MS:[XUC]|M[CIA]:[XNLH])/)*(AV:[NALP]|AC:[LH]|PR:[NLH]|UI:[NR]|S:[UC]|[CIA]:[NLH]|E:[XUPFH]|RL:[XOTWU]|RC:[XURC]|[CIA]R:[XLMH]|MAV:[XNALP]|MAC:[XLH]|MPR:[XNLH]|MUI:[XNR]|MS:[XUC]|M[CIA]:[XNLH])$',  # noqa: E501
                                                                                                }]
                                                                                        
                                                                                        
                                                                                        class attackVector(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "NETWORK": "NETWORK",
                                                                                                    "ADJACENT_NETWORK": "ADJACENT_NETWORK",
                                                                                                    "LOCAL": "LOCAL",
                                                                                                    "PHYSICAL": "PHYSICAL",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NETWORK(cls):
                                                                                                return cls("NETWORK")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def ADJACENT_NETWORK(cls):
                                                                                                return cls("ADJACENT_NETWORK")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOCAL(cls):
                                                                                                return cls("LOCAL")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def PHYSICAL(cls):
                                                                                                return cls("PHYSICAL")
                                                                                        
                                                                                        
                                                                                        class attackComplexity(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "HIGH": "HIGH",
                                                                                                    "LOW": "LOW",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOW(cls):
                                                                                                return cls("LOW")
                                                                                        
                                                                                        
                                                                                        class privilegesRequired(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "HIGH": "HIGH",
                                                                                                    "LOW": "LOW",
                                                                                                    "NONE": "NONE",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOW(cls):
                                                                                                return cls("LOW")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NONE(cls):
                                                                                                return cls("NONE")
                                                                                        
                                                                                        
                                                                                        class userInteraction(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "NONE": "NONE",
                                                                                                    "REQUIRED": "REQUIRED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NONE(cls):
                                                                                                return cls("NONE")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def REQUIRED(cls):
                                                                                                return cls("REQUIRED")
                                                                                        
                                                                                        
                                                                                        class scope(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "UNCHANGED": "UNCHANGED",
                                                                                                    "CHANGED": "CHANGED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def UNCHANGED(cls):
                                                                                                return cls("UNCHANGED")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def CHANGED(cls):
                                                                                                return cls("CHANGED")
                                                                                        
                                                                                        
                                                                                        class confidentialityImpact(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "NONE": "NONE",
                                                                                                    "LOW": "LOW",
                                                                                                    "HIGH": "HIGH",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NONE(cls):
                                                                                                return cls("NONE")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOW(cls):
                                                                                                return cls("LOW")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                        
                                                                                        
                                                                                        class integrityImpact(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "NONE": "NONE",
                                                                                                    "LOW": "LOW",
                                                                                                    "HIGH": "HIGH",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NONE(cls):
                                                                                                return cls("NONE")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOW(cls):
                                                                                                return cls("LOW")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                        
                                                                                        
                                                                                        class availabilityImpact(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "NONE": "NONE",
                                                                                                    "LOW": "LOW",
                                                                                                    "HIGH": "HIGH",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NONE(cls):
                                                                                                return cls("NONE")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOW(cls):
                                                                                                return cls("LOW")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                        
                                                                                        
                                                                                        class baseScore(
                                                                                            schemas.NumberSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                inclusive_maximum = 10
                                                                                                inclusive_minimum = 0
                                                                                        
                                                                                        
                                                                                        class baseSeverity(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "NONE": "NONE",
                                                                                                    "LOW": "LOW",
                                                                                                    "MEDIUM": "MEDIUM",
                                                                                                    "HIGH": "HIGH",
                                                                                                    "CRITICAL": "CRITICAL",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NONE(cls):
                                                                                                return cls("NONE")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOW(cls):
                                                                                                return cls("LOW")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def MEDIUM(cls):
                                                                                                return cls("MEDIUM")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def CRITICAL(cls):
                                                                                                return cls("CRITICAL")
                                                                                        
                                                                                        
                                                                                        class exploitCodeMaturity(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "UNPROVEN": "UNPROVEN",
                                                                                                    "PROOF_OF_CONCEPT": "PROOF_OF_CONCEPT",
                                                                                                    "FUNCTIONAL": "FUNCTIONAL",
                                                                                                    "HIGH": "HIGH",
                                                                                                    "NOT_DEFINED": "NOT_DEFINED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def UNPROVEN(cls):
                                                                                                return cls("UNPROVEN")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def PROOF_OF_CONCEPT(cls):
                                                                                                return cls("PROOF_OF_CONCEPT")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def FUNCTIONAL(cls):
                                                                                                return cls("FUNCTIONAL")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NOT_DEFINED(cls):
                                                                                                return cls("NOT_DEFINED")
                                                                                        
                                                                                        
                                                                                        class remediationLevel(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "OFFICIAL_FIX": "OFFICIAL_FIX",
                                                                                                    "TEMPORARY_FIX": "TEMPORARY_FIX",
                                                                                                    "WORKAROUND": "WORKAROUND",
                                                                                                    "UNAVAILABLE": "UNAVAILABLE",
                                                                                                    "NOT_DEFINED": "NOT_DEFINED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def OFFICIAL_FIX(cls):
                                                                                                return cls("OFFICIAL_FIX")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def TEMPORARY_FIX(cls):
                                                                                                return cls("TEMPORARY_FIX")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def WORKAROUND(cls):
                                                                                                return cls("WORKAROUND")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def UNAVAILABLE(cls):
                                                                                                return cls("UNAVAILABLE")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NOT_DEFINED(cls):
                                                                                                return cls("NOT_DEFINED")
                                                                                        
                                                                                        
                                                                                        class reportConfidence(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "UNKNOWN": "UNKNOWN",
                                                                                                    "REASONABLE": "REASONABLE",
                                                                                                    "CONFIRMED": "CONFIRMED",
                                                                                                    "NOT_DEFINED": "NOT_DEFINED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def UNKNOWN(cls):
                                                                                                return cls("UNKNOWN")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def REASONABLE(cls):
                                                                                                return cls("REASONABLE")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def CONFIRMED(cls):
                                                                                                return cls("CONFIRMED")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NOT_DEFINED(cls):
                                                                                                return cls("NOT_DEFINED")
                                                                                        
                                                                                        
                                                                                        class temporalScore(
                                                                                            schemas.NumberSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                inclusive_maximum = 10
                                                                                                inclusive_minimum = 0
                                                                                        
                                                                                        
                                                                                        class temporalSeverity(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "NONE": "NONE",
                                                                                                    "LOW": "LOW",
                                                                                                    "MEDIUM": "MEDIUM",
                                                                                                    "HIGH": "HIGH",
                                                                                                    "CRITICAL": "CRITICAL",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NONE(cls):
                                                                                                return cls("NONE")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOW(cls):
                                                                                                return cls("LOW")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def MEDIUM(cls):
                                                                                                return cls("MEDIUM")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def CRITICAL(cls):
                                                                                                return cls("CRITICAL")
                                                                                        
                                                                                        
                                                                                        class confidentialityRequirement(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "LOW": "LOW",
                                                                                                    "MEDIUM": "MEDIUM",
                                                                                                    "HIGH": "HIGH",
                                                                                                    "NOT_DEFINED": "NOT_DEFINED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOW(cls):
                                                                                                return cls("LOW")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def MEDIUM(cls):
                                                                                                return cls("MEDIUM")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NOT_DEFINED(cls):
                                                                                                return cls("NOT_DEFINED")
                                                                                        
                                                                                        
                                                                                        class integrityRequirement(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "LOW": "LOW",
                                                                                                    "MEDIUM": "MEDIUM",
                                                                                                    "HIGH": "HIGH",
                                                                                                    "NOT_DEFINED": "NOT_DEFINED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOW(cls):
                                                                                                return cls("LOW")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def MEDIUM(cls):
                                                                                                return cls("MEDIUM")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NOT_DEFINED(cls):
                                                                                                return cls("NOT_DEFINED")
                                                                                        
                                                                                        
                                                                                        class availabilityRequirement(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "LOW": "LOW",
                                                                                                    "MEDIUM": "MEDIUM",
                                                                                                    "HIGH": "HIGH",
                                                                                                    "NOT_DEFINED": "NOT_DEFINED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOW(cls):
                                                                                                return cls("LOW")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def MEDIUM(cls):
                                                                                                return cls("MEDIUM")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NOT_DEFINED(cls):
                                                                                                return cls("NOT_DEFINED")
                                                                                        
                                                                                        
                                                                                        class modifiedAttackVector(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "NETWORK": "NETWORK",
                                                                                                    "ADJACENT_NETWORK": "ADJACENT_NETWORK",
                                                                                                    "LOCAL": "LOCAL",
                                                                                                    "PHYSICAL": "PHYSICAL",
                                                                                                    "NOT_DEFINED": "NOT_DEFINED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NETWORK(cls):
                                                                                                return cls("NETWORK")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def ADJACENT_NETWORK(cls):
                                                                                                return cls("ADJACENT_NETWORK")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOCAL(cls):
                                                                                                return cls("LOCAL")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def PHYSICAL(cls):
                                                                                                return cls("PHYSICAL")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NOT_DEFINED(cls):
                                                                                                return cls("NOT_DEFINED")
                                                                                        
                                                                                        
                                                                                        class modifiedAttackComplexity(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "HIGH": "HIGH",
                                                                                                    "LOW": "LOW",
                                                                                                    "NOT_DEFINED": "NOT_DEFINED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOW(cls):
                                                                                                return cls("LOW")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NOT_DEFINED(cls):
                                                                                                return cls("NOT_DEFINED")
                                                                                        
                                                                                        
                                                                                        class modifiedPrivilegesRequired(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "HIGH": "HIGH",
                                                                                                    "LOW": "LOW",
                                                                                                    "NONE": "NONE",
                                                                                                    "NOT_DEFINED": "NOT_DEFINED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOW(cls):
                                                                                                return cls("LOW")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NONE(cls):
                                                                                                return cls("NONE")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NOT_DEFINED(cls):
                                                                                                return cls("NOT_DEFINED")
                                                                                        
                                                                                        
                                                                                        class modifiedUserInteraction(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "NONE": "NONE",
                                                                                                    "REQUIRED": "REQUIRED",
                                                                                                    "NOT_DEFINED": "NOT_DEFINED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NONE(cls):
                                                                                                return cls("NONE")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def REQUIRED(cls):
                                                                                                return cls("REQUIRED")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NOT_DEFINED(cls):
                                                                                                return cls("NOT_DEFINED")
                                                                                        
                                                                                        
                                                                                        class modifiedScope(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "UNCHANGED": "UNCHANGED",
                                                                                                    "CHANGED": "CHANGED",
                                                                                                    "NOT_DEFINED": "NOT_DEFINED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def UNCHANGED(cls):
                                                                                                return cls("UNCHANGED")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def CHANGED(cls):
                                                                                                return cls("CHANGED")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NOT_DEFINED(cls):
                                                                                                return cls("NOT_DEFINED")
                                                                                        
                                                                                        
                                                                                        class modifiedConfidentialityImpact(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "NONE": "NONE",
                                                                                                    "LOW": "LOW",
                                                                                                    "HIGH": "HIGH",
                                                                                                    "NOT_DEFINED": "NOT_DEFINED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NONE(cls):
                                                                                                return cls("NONE")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOW(cls):
                                                                                                return cls("LOW")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NOT_DEFINED(cls):
                                                                                                return cls("NOT_DEFINED")
                                                                                        
                                                                                        
                                                                                        class modifiedIntegrityImpact(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "NONE": "NONE",
                                                                                                    "LOW": "LOW",
                                                                                                    "HIGH": "HIGH",
                                                                                                    "NOT_DEFINED": "NOT_DEFINED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NONE(cls):
                                                                                                return cls("NONE")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOW(cls):
                                                                                                return cls("LOW")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NOT_DEFINED(cls):
                                                                                                return cls("NOT_DEFINED")
                                                                                        
                                                                                        
                                                                                        class modifiedAvailabilityImpact(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "NONE": "NONE",
                                                                                                    "LOW": "LOW",
                                                                                                    "HIGH": "HIGH",
                                                                                                    "NOT_DEFINED": "NOT_DEFINED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NONE(cls):
                                                                                                return cls("NONE")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOW(cls):
                                                                                                return cls("LOW")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NOT_DEFINED(cls):
                                                                                                return cls("NOT_DEFINED")
                                                                                        
                                                                                        
                                                                                        class environmentalScore(
                                                                                            schemas.NumberSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                inclusive_maximum = 10
                                                                                                inclusive_minimum = 0
                                                                                        
                                                                                        
                                                                                        class environmentalSeverity(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "NONE": "NONE",
                                                                                                    "LOW": "LOW",
                                                                                                    "MEDIUM": "MEDIUM",
                                                                                                    "HIGH": "HIGH",
                                                                                                    "CRITICAL": "CRITICAL",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NONE(cls):
                                                                                                return cls("NONE")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOW(cls):
                                                                                                return cls("LOW")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def MEDIUM(cls):
                                                                                                return cls("MEDIUM")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def CRITICAL(cls):
                                                                                                return cls("CRITICAL")
                                                                                        __annotations__ = {
                                                                                            "version": version,
                                                                                            "vectorString": vectorString,
                                                                                            "attackVector": attackVector,
                                                                                            "attackComplexity": attackComplexity,
                                                                                            "privilegesRequired": privilegesRequired,
                                                                                            "userInteraction": userInteraction,
                                                                                            "scope": scope,
                                                                                            "confidentialityImpact": confidentialityImpact,
                                                                                            "integrityImpact": integrityImpact,
                                                                                            "availabilityImpact": availabilityImpact,
                                                                                            "baseScore": baseScore,
                                                                                            "baseSeverity": baseSeverity,
                                                                                            "exploitCodeMaturity": exploitCodeMaturity,
                                                                                            "remediationLevel": remediationLevel,
                                                                                            "reportConfidence": reportConfidence,
                                                                                            "temporalScore": temporalScore,
                                                                                            "temporalSeverity": temporalSeverity,
                                                                                            "confidentialityRequirement": confidentialityRequirement,
                                                                                            "integrityRequirement": integrityRequirement,
                                                                                            "availabilityRequirement": availabilityRequirement,
                                                                                            "modifiedAttackVector": modifiedAttackVector,
                                                                                            "modifiedAttackComplexity": modifiedAttackComplexity,
                                                                                            "modifiedPrivilegesRequired": modifiedPrivilegesRequired,
                                                                                            "modifiedUserInteraction": modifiedUserInteraction,
                                                                                            "modifiedScope": modifiedScope,
                                                                                            "modifiedConfidentialityImpact": modifiedConfidentialityImpact,
                                                                                            "modifiedIntegrityImpact": modifiedIntegrityImpact,
                                                                                            "modifiedAvailabilityImpact": modifiedAvailabilityImpact,
                                                                                            "environmentalScore": environmentalScore,
                                                                                            "environmentalSeverity": environmentalSeverity,
                                                                                        }
                                                                                
                                                                                baseSeverity: MetaOapg.properties.baseSeverity
                                                                                baseScore: MetaOapg.properties.baseScore
                                                                                vectorString: MetaOapg.properties.vectorString
                                                                                version: MetaOapg.properties.version
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["vectorString"]) -> MetaOapg.properties.vectorString: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["attackVector"]) -> MetaOapg.properties.attackVector: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["attackComplexity"]) -> MetaOapg.properties.attackComplexity: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["privilegesRequired"]) -> MetaOapg.properties.privilegesRequired: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["userInteraction"]) -> MetaOapg.properties.userInteraction: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["scope"]) -> MetaOapg.properties.scope: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["confidentialityImpact"]) -> MetaOapg.properties.confidentialityImpact: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["integrityImpact"]) -> MetaOapg.properties.integrityImpact: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["availabilityImpact"]) -> MetaOapg.properties.availabilityImpact: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["baseScore"]) -> MetaOapg.properties.baseScore: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["baseSeverity"]) -> MetaOapg.properties.baseSeverity: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["exploitCodeMaturity"]) -> MetaOapg.properties.exploitCodeMaturity: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["remediationLevel"]) -> MetaOapg.properties.remediationLevel: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["reportConfidence"]) -> MetaOapg.properties.reportConfidence: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["temporalScore"]) -> MetaOapg.properties.temporalScore: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["temporalSeverity"]) -> MetaOapg.properties.temporalSeverity: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["confidentialityRequirement"]) -> MetaOapg.properties.confidentialityRequirement: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["integrityRequirement"]) -> MetaOapg.properties.integrityRequirement: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["availabilityRequirement"]) -> MetaOapg.properties.availabilityRequirement: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["modifiedAttackVector"]) -> MetaOapg.properties.modifiedAttackVector: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["modifiedAttackComplexity"]) -> MetaOapg.properties.modifiedAttackComplexity: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["modifiedPrivilegesRequired"]) -> MetaOapg.properties.modifiedPrivilegesRequired: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["modifiedUserInteraction"]) -> MetaOapg.properties.modifiedUserInteraction: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["modifiedScope"]) -> MetaOapg.properties.modifiedScope: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["modifiedConfidentialityImpact"]) -> MetaOapg.properties.modifiedConfidentialityImpact: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["modifiedIntegrityImpact"]) -> MetaOapg.properties.modifiedIntegrityImpact: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["modifiedAvailabilityImpact"]) -> MetaOapg.properties.modifiedAvailabilityImpact: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["environmentalScore"]) -> MetaOapg.properties.environmentalScore: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["environmentalSeverity"]) -> MetaOapg.properties.environmentalSeverity: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                                                
                                                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["version", "vectorString", "attackVector", "attackComplexity", "privilegesRequired", "userInteraction", "scope", "confidentialityImpact", "integrityImpact", "availabilityImpact", "baseScore", "baseSeverity", "exploitCodeMaturity", "remediationLevel", "reportConfidence", "temporalScore", "temporalSeverity", "confidentialityRequirement", "integrityRequirement", "availabilityRequirement", "modifiedAttackVector", "modifiedAttackComplexity", "modifiedPrivilegesRequired", "modifiedUserInteraction", "modifiedScope", "modifiedConfidentialityImpact", "modifiedIntegrityImpact", "modifiedAvailabilityImpact", "environmentalScore", "environmentalSeverity", ], str]):
                                                                                    # dict_instance[name] accessor
                                                                                    return super().__getitem__(name)
                                                                                
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["vectorString"]) -> MetaOapg.properties.vectorString: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["attackVector"]) -> typing.Union[MetaOapg.properties.attackVector, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["attackComplexity"]) -> typing.Union[MetaOapg.properties.attackComplexity, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["privilegesRequired"]) -> typing.Union[MetaOapg.properties.privilegesRequired, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["userInteraction"]) -> typing.Union[MetaOapg.properties.userInteraction, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["scope"]) -> typing.Union[MetaOapg.properties.scope, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["confidentialityImpact"]) -> typing.Union[MetaOapg.properties.confidentialityImpact, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["integrityImpact"]) -> typing.Union[MetaOapg.properties.integrityImpact, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["availabilityImpact"]) -> typing.Union[MetaOapg.properties.availabilityImpact, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["baseScore"]) -> MetaOapg.properties.baseScore: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["baseSeverity"]) -> MetaOapg.properties.baseSeverity: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["exploitCodeMaturity"]) -> typing.Union[MetaOapg.properties.exploitCodeMaturity, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["remediationLevel"]) -> typing.Union[MetaOapg.properties.remediationLevel, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["reportConfidence"]) -> typing.Union[MetaOapg.properties.reportConfidence, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["temporalScore"]) -> typing.Union[MetaOapg.properties.temporalScore, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["temporalSeverity"]) -> typing.Union[MetaOapg.properties.temporalSeverity, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["confidentialityRequirement"]) -> typing.Union[MetaOapg.properties.confidentialityRequirement, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["integrityRequirement"]) -> typing.Union[MetaOapg.properties.integrityRequirement, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["availabilityRequirement"]) -> typing.Union[MetaOapg.properties.availabilityRequirement, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["modifiedAttackVector"]) -> typing.Union[MetaOapg.properties.modifiedAttackVector, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["modifiedAttackComplexity"]) -> typing.Union[MetaOapg.properties.modifiedAttackComplexity, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["modifiedPrivilegesRequired"]) -> typing.Union[MetaOapg.properties.modifiedPrivilegesRequired, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["modifiedUserInteraction"]) -> typing.Union[MetaOapg.properties.modifiedUserInteraction, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["modifiedScope"]) -> typing.Union[MetaOapg.properties.modifiedScope, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["modifiedConfidentialityImpact"]) -> typing.Union[MetaOapg.properties.modifiedConfidentialityImpact, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["modifiedIntegrityImpact"]) -> typing.Union[MetaOapg.properties.modifiedIntegrityImpact, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["modifiedAvailabilityImpact"]) -> typing.Union[MetaOapg.properties.modifiedAvailabilityImpact, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["environmentalScore"]) -> typing.Union[MetaOapg.properties.environmentalScore, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["environmentalSeverity"]) -> typing.Union[MetaOapg.properties.environmentalSeverity, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                                                
                                                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["version", "vectorString", "attackVector", "attackComplexity", "privilegesRequired", "userInteraction", "scope", "confidentialityImpact", "integrityImpact", "availabilityImpact", "baseScore", "baseSeverity", "exploitCodeMaturity", "remediationLevel", "reportConfidence", "temporalScore", "temporalSeverity", "confidentialityRequirement", "integrityRequirement", "availabilityRequirement", "modifiedAttackVector", "modifiedAttackComplexity", "modifiedPrivilegesRequired", "modifiedUserInteraction", "modifiedScope", "modifiedConfidentialityImpact", "modifiedIntegrityImpact", "modifiedAvailabilityImpact", "environmentalScore", "environmentalSeverity", ], str]):
                                                                                    return super().get_item_oapg(name)
                                                                                
                                                                            
                                                                                def __new__(
                                                                                    cls,
                                                                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                                                                    baseSeverity: typing.Union[MetaOapg.properties.baseSeverity, str, ],
                                                                                    baseScore: typing.Union[MetaOapg.properties.baseScore, decimal.Decimal, int, float, ],
                                                                                    vectorString: typing.Union[MetaOapg.properties.vectorString, str, ],
                                                                                    version: typing.Union[MetaOapg.properties.version, str, ],
                                                                                    attackVector: typing.Union[MetaOapg.properties.attackVector, str, schemas.Unset] = schemas.unset,
                                                                                    attackComplexity: typing.Union[MetaOapg.properties.attackComplexity, str, schemas.Unset] = schemas.unset,
                                                                                    privilegesRequired: typing.Union[MetaOapg.properties.privilegesRequired, str, schemas.Unset] = schemas.unset,
                                                                                    userInteraction: typing.Union[MetaOapg.properties.userInteraction, str, schemas.Unset] = schemas.unset,
                                                                                    scope: typing.Union[MetaOapg.properties.scope, str, schemas.Unset] = schemas.unset,
                                                                                    confidentialityImpact: typing.Union[MetaOapg.properties.confidentialityImpact, str, schemas.Unset] = schemas.unset,
                                                                                    integrityImpact: typing.Union[MetaOapg.properties.integrityImpact, str, schemas.Unset] = schemas.unset,
                                                                                    availabilityImpact: typing.Union[MetaOapg.properties.availabilityImpact, str, schemas.Unset] = schemas.unset,
                                                                                    exploitCodeMaturity: typing.Union[MetaOapg.properties.exploitCodeMaturity, str, schemas.Unset] = schemas.unset,
                                                                                    remediationLevel: typing.Union[MetaOapg.properties.remediationLevel, str, schemas.Unset] = schemas.unset,
                                                                                    reportConfidence: typing.Union[MetaOapg.properties.reportConfidence, str, schemas.Unset] = schemas.unset,
                                                                                    temporalScore: typing.Union[MetaOapg.properties.temporalScore, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                                                                    temporalSeverity: typing.Union[MetaOapg.properties.temporalSeverity, str, schemas.Unset] = schemas.unset,
                                                                                    confidentialityRequirement: typing.Union[MetaOapg.properties.confidentialityRequirement, str, schemas.Unset] = schemas.unset,
                                                                                    integrityRequirement: typing.Union[MetaOapg.properties.integrityRequirement, str, schemas.Unset] = schemas.unset,
                                                                                    availabilityRequirement: typing.Union[MetaOapg.properties.availabilityRequirement, str, schemas.Unset] = schemas.unset,
                                                                                    modifiedAttackVector: typing.Union[MetaOapg.properties.modifiedAttackVector, str, schemas.Unset] = schemas.unset,
                                                                                    modifiedAttackComplexity: typing.Union[MetaOapg.properties.modifiedAttackComplexity, str, schemas.Unset] = schemas.unset,
                                                                                    modifiedPrivilegesRequired: typing.Union[MetaOapg.properties.modifiedPrivilegesRequired, str, schemas.Unset] = schemas.unset,
                                                                                    modifiedUserInteraction: typing.Union[MetaOapg.properties.modifiedUserInteraction, str, schemas.Unset] = schemas.unset,
                                                                                    modifiedScope: typing.Union[MetaOapg.properties.modifiedScope, str, schemas.Unset] = schemas.unset,
                                                                                    modifiedConfidentialityImpact: typing.Union[MetaOapg.properties.modifiedConfidentialityImpact, str, schemas.Unset] = schemas.unset,
                                                                                    modifiedIntegrityImpact: typing.Union[MetaOapg.properties.modifiedIntegrityImpact, str, schemas.Unset] = schemas.unset,
                                                                                    modifiedAvailabilityImpact: typing.Union[MetaOapg.properties.modifiedAvailabilityImpact, str, schemas.Unset] = schemas.unset,
                                                                                    environmentalScore: typing.Union[MetaOapg.properties.environmentalScore, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                                                                    environmentalSeverity: typing.Union[MetaOapg.properties.environmentalSeverity, str, schemas.Unset] = schemas.unset,
                                                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                                                ) -> 'cvssData':
                                                                                    return super().__new__(
                                                                                        cls,
                                                                                        *args,
                                                                                        baseSeverity=baseSeverity,
                                                                                        baseScore=baseScore,
                                                                                        vectorString=vectorString,
                                                                                        version=version,
                                                                                        attackVector=attackVector,
                                                                                        attackComplexity=attackComplexity,
                                                                                        privilegesRequired=privilegesRequired,
                                                                                        userInteraction=userInteraction,
                                                                                        scope=scope,
                                                                                        confidentialityImpact=confidentialityImpact,
                                                                                        integrityImpact=integrityImpact,
                                                                                        availabilityImpact=availabilityImpact,
                                                                                        exploitCodeMaturity=exploitCodeMaturity,
                                                                                        remediationLevel=remediationLevel,
                                                                                        reportConfidence=reportConfidence,
                                                                                        temporalScore=temporalScore,
                                                                                        temporalSeverity=temporalSeverity,
                                                                                        confidentialityRequirement=confidentialityRequirement,
                                                                                        integrityRequirement=integrityRequirement,
                                                                                        availabilityRequirement=availabilityRequirement,
                                                                                        modifiedAttackVector=modifiedAttackVector,
                                                                                        modifiedAttackComplexity=modifiedAttackComplexity,
                                                                                        modifiedPrivilegesRequired=modifiedPrivilegesRequired,
                                                                                        modifiedUserInteraction=modifiedUserInteraction,
                                                                                        modifiedScope=modifiedScope,
                                                                                        modifiedConfidentialityImpact=modifiedConfidentialityImpact,
                                                                                        modifiedIntegrityImpact=modifiedIntegrityImpact,
                                                                                        modifiedAvailabilityImpact=modifiedAvailabilityImpact,
                                                                                        environmentalScore=environmentalScore,
                                                                                        environmentalSeverity=environmentalSeverity,
                                                                                        _configuration=_configuration,
                                                                                        **kwargs,
                                                                                    )
                                                                            
                                                                            
                                                                            class exploitabilityScore(
                                                                                schemas.NumberSchema
                                                                            ):
                                                                            
                                                                            
                                                                                class MetaOapg:
                                                                                    inclusive_maximum = 10
                                                                                    inclusive_minimum = 0
                                                                            
                                                                            
                                                                            class impactScore(
                                                                                schemas.NumberSchema
                                                                            ):
                                                                            
                                                                            
                                                                                class MetaOapg:
                                                                                    inclusive_maximum = 10
                                                                                    inclusive_minimum = 0
                                                                            __annotations__ = {
                                                                                "source": source,
                                                                                "type": type,
                                                                                "cvssData": cvssData,
                                                                                "exploitabilityScore": exploitabilityScore,
                                                                                "impactScore": impactScore,
                                                                            }
                                                                        additional_properties = schemas.NotAnyTypeSchema
                                                                    
                                                                    cvssData: MetaOapg.properties.cvssData
                                                                    source: MetaOapg.properties.source
                                                                    type: MetaOapg.properties.type
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["cvssData"]) -> MetaOapg.properties.cvssData: ...
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["exploitabilityScore"]) -> MetaOapg.properties.exploitabilityScore: ...
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["impactScore"]) -> MetaOapg.properties.impactScore: ...
                                                                    
                                                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cvssData"], typing_extensions.Literal["source"], typing_extensions.Literal["type"], typing_extensions.Literal["exploitabilityScore"], typing_extensions.Literal["impactScore"], ]):
                                                                        # dict_instance[name] accessor
                                                                        return super().__getitem__(name)
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["cvssData"]) -> MetaOapg.properties.cvssData: ...
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["exploitabilityScore"]) -> typing.Union[MetaOapg.properties.exploitabilityScore, schemas.Unset]: ...
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["impactScore"]) -> typing.Union[MetaOapg.properties.impactScore, schemas.Unset]: ...
                                                                    
                                                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cvssData"], typing_extensions.Literal["source"], typing_extensions.Literal["type"], typing_extensions.Literal["exploitabilityScore"], typing_extensions.Literal["impactScore"], ]):
                                                                        return super().get_item_oapg(name)
                                                                
                                                                    def __new__(
                                                                        cls,
                                                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                                                        cvssData: typing.Union[MetaOapg.properties.cvssData, dict, frozendict.frozendict, ],
                                                                        source: typing.Union[MetaOapg.properties.source, str, ],
                                                                        type: typing.Union[MetaOapg.properties.type, dict, frozendict.frozendict, ],
                                                                        exploitabilityScore: typing.Union[MetaOapg.properties.exploitabilityScore, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                                                        impactScore: typing.Union[MetaOapg.properties.impactScore, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                                    ) -> 'items':
                                                                        return super().__new__(
                                                                            cls,
                                                                            *args,
                                                                            cvssData=cvssData,
                                                                            source=source,
                                                                            type=type,
                                                                            exploitabilityScore=exploitabilityScore,
                                                                            impactScore=impactScore,
                                                                            _configuration=_configuration,
                                                                        )
                                                        
                                                            def __new__(
                                                                cls,
                                                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                            ) -> 'cvssMetricV31':
                                                                return super().__new__(
                                                                    cls,
                                                                    arg,
                                                                    _configuration=_configuration,
                                                                )
                                                        
                                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                                return super().__getitem__(i)
                                                        
                                                        
                                                        class cvssMetricV30(
                                                            schemas.ListSchema
                                                        ):
                                                        
                                                        
                                                            class MetaOapg:
                                                                
                                                                
                                                                class items(
                                                                    schemas.DictSchema
                                                                ):
                                                                
                                                                
                                                                    class MetaOapg:
                                                                        required = {
                                                                            "cvssData",
                                                                            "source",
                                                                            "type",
                                                                        }
                                                                        
                                                                        class properties:
                                                                            source = schemas.StrSchema
                                                                            type = schemas.DictSchema
                                                                            
                                                                            
                                                                            class cvssData(
                                                                                schemas.DictSchema
                                                                            ):
                                                                            
                                                                            
                                                                                class MetaOapg:
                                                                                    required = {
                                                                                        "baseSeverity",
                                                                                        "baseScore",
                                                                                        "vectorString",
                                                                                        "version",
                                                                                    }
                                                                                    
                                                                                    class properties:
                                                                                        
                                                                                        
                                                                                        class version(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "3.0": "POSITIVE_3_PT_0",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def POSITIVE_3_PT_0(cls):
                                                                                                return cls("3.0")
                                                                                        
                                                                                        
                                                                                        class vectorString(
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                regex=[{
                                                                                                    'pattern': r'^CVSS:3[.]0/((AV:[NALP]|AC:[LH]|PR:[UNLH]|UI:[NR]|S:[UC]|[CIA]:[NLH]|E:[XUPFH]|RL:[XOTWU]|RC:[XURC]|[CIA]R:[XLMH]|MAV:[XNALP]|MAC:[XLH]|MPR:[XUNLH]|MUI:[XNR]|MS:[XUC]|M[CIA]:[XNLH])/)*(AV:[NALP]|AC:[LH]|PR:[UNLH]|UI:[NR]|S:[UC]|[CIA]:[NLH]|E:[XUPFH]|RL:[XOTWU]|RC:[XURC]|[CIA]R:[XLMH]|MAV:[XNALP]|MAC:[XLH]|MPR:[XUNLH]|MUI:[XNR]|MS:[XUC]|M[CIA]:[XNLH])$',  # noqa: E501
                                                                                                }]
                                                                                        
                                                                                        
                                                                                        class attackVector(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "NETWORK": "NETWORK",
                                                                                                    "ADJACENT_NETWORK": "ADJACENT_NETWORK",
                                                                                                    "LOCAL": "LOCAL",
                                                                                                    "PHYSICAL": "PHYSICAL",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NETWORK(cls):
                                                                                                return cls("NETWORK")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def ADJACENT_NETWORK(cls):
                                                                                                return cls("ADJACENT_NETWORK")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOCAL(cls):
                                                                                                return cls("LOCAL")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def PHYSICAL(cls):
                                                                                                return cls("PHYSICAL")
                                                                                        
                                                                                        
                                                                                        class attackComplexity(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "HIGH": "HIGH",
                                                                                                    "LOW": "LOW",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOW(cls):
                                                                                                return cls("LOW")
                                                                                        
                                                                                        
                                                                                        class privilegesRequired(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "HIGH": "HIGH",
                                                                                                    "LOW": "LOW",
                                                                                                    "NONE": "NONE",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOW(cls):
                                                                                                return cls("LOW")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NONE(cls):
                                                                                                return cls("NONE")
                                                                                        
                                                                                        
                                                                                        class userInteraction(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "NONE": "NONE",
                                                                                                    "REQUIRED": "REQUIRED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NONE(cls):
                                                                                                return cls("NONE")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def REQUIRED(cls):
                                                                                                return cls("REQUIRED")
                                                                                        
                                                                                        
                                                                                        class scope(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "UNCHANGED": "UNCHANGED",
                                                                                                    "CHANGED": "CHANGED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def UNCHANGED(cls):
                                                                                                return cls("UNCHANGED")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def CHANGED(cls):
                                                                                                return cls("CHANGED")
                                                                                        
                                                                                        
                                                                                        class confidentialityImpact(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "NONE": "NONE",
                                                                                                    "LOW": "LOW",
                                                                                                    "HIGH": "HIGH",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NONE(cls):
                                                                                                return cls("NONE")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOW(cls):
                                                                                                return cls("LOW")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                        
                                                                                        
                                                                                        class integrityImpact(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "NONE": "NONE",
                                                                                                    "LOW": "LOW",
                                                                                                    "HIGH": "HIGH",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NONE(cls):
                                                                                                return cls("NONE")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOW(cls):
                                                                                                return cls("LOW")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                        
                                                                                        
                                                                                        class availabilityImpact(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "NONE": "NONE",
                                                                                                    "LOW": "LOW",
                                                                                                    "HIGH": "HIGH",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NONE(cls):
                                                                                                return cls("NONE")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOW(cls):
                                                                                                return cls("LOW")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                        
                                                                                        
                                                                                        class baseScore(
                                                                                            schemas.NumberSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                inclusive_maximum = 10
                                                                                                inclusive_minimum = 0
                                                                                        
                                                                                        
                                                                                        class baseSeverity(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "NONE": "NONE",
                                                                                                    "LOW": "LOW",
                                                                                                    "MEDIUM": "MEDIUM",
                                                                                                    "HIGH": "HIGH",
                                                                                                    "CRITICAL": "CRITICAL",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NONE(cls):
                                                                                                return cls("NONE")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOW(cls):
                                                                                                return cls("LOW")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def MEDIUM(cls):
                                                                                                return cls("MEDIUM")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def CRITICAL(cls):
                                                                                                return cls("CRITICAL")
                                                                                        
                                                                                        
                                                                                        class exploitCodeMaturity(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "UNPROVEN": "UNPROVEN",
                                                                                                    "PROOF_OF_CONCEPT": "PROOF_OF_CONCEPT",
                                                                                                    "FUNCTIONAL": "FUNCTIONAL",
                                                                                                    "HIGH": "HIGH",
                                                                                                    "NOT_DEFINED": "NOT_DEFINED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def UNPROVEN(cls):
                                                                                                return cls("UNPROVEN")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def PROOF_OF_CONCEPT(cls):
                                                                                                return cls("PROOF_OF_CONCEPT")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def FUNCTIONAL(cls):
                                                                                                return cls("FUNCTIONAL")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NOT_DEFINED(cls):
                                                                                                return cls("NOT_DEFINED")
                                                                                        
                                                                                        
                                                                                        class remediationLevel(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "OFFICIAL_FIX": "OFFICIAL_FIX",
                                                                                                    "TEMPORARY_FIX": "TEMPORARY_FIX",
                                                                                                    "WORKAROUND": "WORKAROUND",
                                                                                                    "UNAVAILABLE": "UNAVAILABLE",
                                                                                                    "NOT_DEFINED": "NOT_DEFINED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def OFFICIAL_FIX(cls):
                                                                                                return cls("OFFICIAL_FIX")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def TEMPORARY_FIX(cls):
                                                                                                return cls("TEMPORARY_FIX")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def WORKAROUND(cls):
                                                                                                return cls("WORKAROUND")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def UNAVAILABLE(cls):
                                                                                                return cls("UNAVAILABLE")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NOT_DEFINED(cls):
                                                                                                return cls("NOT_DEFINED")
                                                                                        
                                                                                        
                                                                                        class reportConfidence(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "UNKNOWN": "UNKNOWN",
                                                                                                    "REASONABLE": "REASONABLE",
                                                                                                    "CONFIRMED": "CONFIRMED",
                                                                                                    "NOT_DEFINED": "NOT_DEFINED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def UNKNOWN(cls):
                                                                                                return cls("UNKNOWN")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def REASONABLE(cls):
                                                                                                return cls("REASONABLE")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def CONFIRMED(cls):
                                                                                                return cls("CONFIRMED")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NOT_DEFINED(cls):
                                                                                                return cls("NOT_DEFINED")
                                                                                        
                                                                                        
                                                                                        class temporalScore(
                                                                                            schemas.NumberSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                inclusive_maximum = 10
                                                                                                inclusive_minimum = 0
                                                                                        
                                                                                        
                                                                                        class temporalSeverity(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "NONE": "NONE",
                                                                                                    "LOW": "LOW",
                                                                                                    "MEDIUM": "MEDIUM",
                                                                                                    "HIGH": "HIGH",
                                                                                                    "CRITICAL": "CRITICAL",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NONE(cls):
                                                                                                return cls("NONE")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOW(cls):
                                                                                                return cls("LOW")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def MEDIUM(cls):
                                                                                                return cls("MEDIUM")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def CRITICAL(cls):
                                                                                                return cls("CRITICAL")
                                                                                        
                                                                                        
                                                                                        class confidentialityRequirement(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "LOW": "LOW",
                                                                                                    "MEDIUM": "MEDIUM",
                                                                                                    "HIGH": "HIGH",
                                                                                                    "NOT_DEFINED": "NOT_DEFINED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOW(cls):
                                                                                                return cls("LOW")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def MEDIUM(cls):
                                                                                                return cls("MEDIUM")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NOT_DEFINED(cls):
                                                                                                return cls("NOT_DEFINED")
                                                                                        
                                                                                        
                                                                                        class integrityRequirement(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "LOW": "LOW",
                                                                                                    "MEDIUM": "MEDIUM",
                                                                                                    "HIGH": "HIGH",
                                                                                                    "NOT_DEFINED": "NOT_DEFINED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOW(cls):
                                                                                                return cls("LOW")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def MEDIUM(cls):
                                                                                                return cls("MEDIUM")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NOT_DEFINED(cls):
                                                                                                return cls("NOT_DEFINED")
                                                                                        
                                                                                        
                                                                                        class availabilityRequirement(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "LOW": "LOW",
                                                                                                    "MEDIUM": "MEDIUM",
                                                                                                    "HIGH": "HIGH",
                                                                                                    "NOT_DEFINED": "NOT_DEFINED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOW(cls):
                                                                                                return cls("LOW")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def MEDIUM(cls):
                                                                                                return cls("MEDIUM")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NOT_DEFINED(cls):
                                                                                                return cls("NOT_DEFINED")
                                                                                        
                                                                                        
                                                                                        class modifiedAttackVector(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "NETWORK": "NETWORK",
                                                                                                    "ADJACENT_NETWORK": "ADJACENT_NETWORK",
                                                                                                    "LOCAL": "LOCAL",
                                                                                                    "PHYSICAL": "PHYSICAL",
                                                                                                    "NOT_DEFINED": "NOT_DEFINED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NETWORK(cls):
                                                                                                return cls("NETWORK")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def ADJACENT_NETWORK(cls):
                                                                                                return cls("ADJACENT_NETWORK")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOCAL(cls):
                                                                                                return cls("LOCAL")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def PHYSICAL(cls):
                                                                                                return cls("PHYSICAL")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NOT_DEFINED(cls):
                                                                                                return cls("NOT_DEFINED")
                                                                                        
                                                                                        
                                                                                        class modifiedAttackComplexity(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "HIGH": "HIGH",
                                                                                                    "LOW": "LOW",
                                                                                                    "NOT_DEFINED": "NOT_DEFINED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOW(cls):
                                                                                                return cls("LOW")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NOT_DEFINED(cls):
                                                                                                return cls("NOT_DEFINED")
                                                                                        
                                                                                        
                                                                                        class modifiedPrivilegesRequired(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "HIGH": "HIGH",
                                                                                                    "LOW": "LOW",
                                                                                                    "NONE": "NONE",
                                                                                                    "NOT_DEFINED": "NOT_DEFINED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOW(cls):
                                                                                                return cls("LOW")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NONE(cls):
                                                                                                return cls("NONE")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NOT_DEFINED(cls):
                                                                                                return cls("NOT_DEFINED")
                                                                                        
                                                                                        
                                                                                        class modifiedUserInteraction(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "NONE": "NONE",
                                                                                                    "REQUIRED": "REQUIRED",
                                                                                                    "NOT_DEFINED": "NOT_DEFINED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NONE(cls):
                                                                                                return cls("NONE")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def REQUIRED(cls):
                                                                                                return cls("REQUIRED")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NOT_DEFINED(cls):
                                                                                                return cls("NOT_DEFINED")
                                                                                        
                                                                                        
                                                                                        class modifiedScope(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "UNCHANGED": "UNCHANGED",
                                                                                                    "CHANGED": "CHANGED",
                                                                                                    "NOT_DEFINED": "NOT_DEFINED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def UNCHANGED(cls):
                                                                                                return cls("UNCHANGED")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def CHANGED(cls):
                                                                                                return cls("CHANGED")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NOT_DEFINED(cls):
                                                                                                return cls("NOT_DEFINED")
                                                                                        
                                                                                        
                                                                                        class modifiedConfidentialityImpact(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "NONE": "NONE",
                                                                                                    "LOW": "LOW",
                                                                                                    "HIGH": "HIGH",
                                                                                                    "NOT_DEFINED": "NOT_DEFINED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NONE(cls):
                                                                                                return cls("NONE")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOW(cls):
                                                                                                return cls("LOW")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NOT_DEFINED(cls):
                                                                                                return cls("NOT_DEFINED")
                                                                                        
                                                                                        
                                                                                        class modifiedIntegrityImpact(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "NONE": "NONE",
                                                                                                    "LOW": "LOW",
                                                                                                    "HIGH": "HIGH",
                                                                                                    "NOT_DEFINED": "NOT_DEFINED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NONE(cls):
                                                                                                return cls("NONE")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOW(cls):
                                                                                                return cls("LOW")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NOT_DEFINED(cls):
                                                                                                return cls("NOT_DEFINED")
                                                                                        
                                                                                        
                                                                                        class modifiedAvailabilityImpact(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "NONE": "NONE",
                                                                                                    "LOW": "LOW",
                                                                                                    "HIGH": "HIGH",
                                                                                                    "NOT_DEFINED": "NOT_DEFINED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NONE(cls):
                                                                                                return cls("NONE")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOW(cls):
                                                                                                return cls("LOW")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NOT_DEFINED(cls):
                                                                                                return cls("NOT_DEFINED")
                                                                                        
                                                                                        
                                                                                        class environmentalScore(
                                                                                            schemas.NumberSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                inclusive_maximum = 10
                                                                                                inclusive_minimum = 0
                                                                                        
                                                                                        
                                                                                        class environmentalSeverity(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "NONE": "NONE",
                                                                                                    "LOW": "LOW",
                                                                                                    "MEDIUM": "MEDIUM",
                                                                                                    "HIGH": "HIGH",
                                                                                                    "CRITICAL": "CRITICAL",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NONE(cls):
                                                                                                return cls("NONE")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOW(cls):
                                                                                                return cls("LOW")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def MEDIUM(cls):
                                                                                                return cls("MEDIUM")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def CRITICAL(cls):
                                                                                                return cls("CRITICAL")
                                                                                        __annotations__ = {
                                                                                            "version": version,
                                                                                            "vectorString": vectorString,
                                                                                            "attackVector": attackVector,
                                                                                            "attackComplexity": attackComplexity,
                                                                                            "privilegesRequired": privilegesRequired,
                                                                                            "userInteraction": userInteraction,
                                                                                            "scope": scope,
                                                                                            "confidentialityImpact": confidentialityImpact,
                                                                                            "integrityImpact": integrityImpact,
                                                                                            "availabilityImpact": availabilityImpact,
                                                                                            "baseScore": baseScore,
                                                                                            "baseSeverity": baseSeverity,
                                                                                            "exploitCodeMaturity": exploitCodeMaturity,
                                                                                            "remediationLevel": remediationLevel,
                                                                                            "reportConfidence": reportConfidence,
                                                                                            "temporalScore": temporalScore,
                                                                                            "temporalSeverity": temporalSeverity,
                                                                                            "confidentialityRequirement": confidentialityRequirement,
                                                                                            "integrityRequirement": integrityRequirement,
                                                                                            "availabilityRequirement": availabilityRequirement,
                                                                                            "modifiedAttackVector": modifiedAttackVector,
                                                                                            "modifiedAttackComplexity": modifiedAttackComplexity,
                                                                                            "modifiedPrivilegesRequired": modifiedPrivilegesRequired,
                                                                                            "modifiedUserInteraction": modifiedUserInteraction,
                                                                                            "modifiedScope": modifiedScope,
                                                                                            "modifiedConfidentialityImpact": modifiedConfidentialityImpact,
                                                                                            "modifiedIntegrityImpact": modifiedIntegrityImpact,
                                                                                            "modifiedAvailabilityImpact": modifiedAvailabilityImpact,
                                                                                            "environmentalScore": environmentalScore,
                                                                                            "environmentalSeverity": environmentalSeverity,
                                                                                        }
                                                                                
                                                                                baseSeverity: MetaOapg.properties.baseSeverity
                                                                                baseScore: MetaOapg.properties.baseScore
                                                                                vectorString: MetaOapg.properties.vectorString
                                                                                version: MetaOapg.properties.version
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["vectorString"]) -> MetaOapg.properties.vectorString: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["attackVector"]) -> MetaOapg.properties.attackVector: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["attackComplexity"]) -> MetaOapg.properties.attackComplexity: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["privilegesRequired"]) -> MetaOapg.properties.privilegesRequired: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["userInteraction"]) -> MetaOapg.properties.userInteraction: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["scope"]) -> MetaOapg.properties.scope: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["confidentialityImpact"]) -> MetaOapg.properties.confidentialityImpact: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["integrityImpact"]) -> MetaOapg.properties.integrityImpact: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["availabilityImpact"]) -> MetaOapg.properties.availabilityImpact: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["baseScore"]) -> MetaOapg.properties.baseScore: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["baseSeverity"]) -> MetaOapg.properties.baseSeverity: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["exploitCodeMaturity"]) -> MetaOapg.properties.exploitCodeMaturity: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["remediationLevel"]) -> MetaOapg.properties.remediationLevel: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["reportConfidence"]) -> MetaOapg.properties.reportConfidence: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["temporalScore"]) -> MetaOapg.properties.temporalScore: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["temporalSeverity"]) -> MetaOapg.properties.temporalSeverity: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["confidentialityRequirement"]) -> MetaOapg.properties.confidentialityRequirement: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["integrityRequirement"]) -> MetaOapg.properties.integrityRequirement: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["availabilityRequirement"]) -> MetaOapg.properties.availabilityRequirement: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["modifiedAttackVector"]) -> MetaOapg.properties.modifiedAttackVector: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["modifiedAttackComplexity"]) -> MetaOapg.properties.modifiedAttackComplexity: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["modifiedPrivilegesRequired"]) -> MetaOapg.properties.modifiedPrivilegesRequired: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["modifiedUserInteraction"]) -> MetaOapg.properties.modifiedUserInteraction: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["modifiedScope"]) -> MetaOapg.properties.modifiedScope: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["modifiedConfidentialityImpact"]) -> MetaOapg.properties.modifiedConfidentialityImpact: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["modifiedIntegrityImpact"]) -> MetaOapg.properties.modifiedIntegrityImpact: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["modifiedAvailabilityImpact"]) -> MetaOapg.properties.modifiedAvailabilityImpact: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["environmentalScore"]) -> MetaOapg.properties.environmentalScore: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["environmentalSeverity"]) -> MetaOapg.properties.environmentalSeverity: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                                                
                                                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["version", "vectorString", "attackVector", "attackComplexity", "privilegesRequired", "userInteraction", "scope", "confidentialityImpact", "integrityImpact", "availabilityImpact", "baseScore", "baseSeverity", "exploitCodeMaturity", "remediationLevel", "reportConfidence", "temporalScore", "temporalSeverity", "confidentialityRequirement", "integrityRequirement", "availabilityRequirement", "modifiedAttackVector", "modifiedAttackComplexity", "modifiedPrivilegesRequired", "modifiedUserInteraction", "modifiedScope", "modifiedConfidentialityImpact", "modifiedIntegrityImpact", "modifiedAvailabilityImpact", "environmentalScore", "environmentalSeverity", ], str]):
                                                                                    # dict_instance[name] accessor
                                                                                    return super().__getitem__(name)
                                                                                
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["vectorString"]) -> MetaOapg.properties.vectorString: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["attackVector"]) -> typing.Union[MetaOapg.properties.attackVector, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["attackComplexity"]) -> typing.Union[MetaOapg.properties.attackComplexity, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["privilegesRequired"]) -> typing.Union[MetaOapg.properties.privilegesRequired, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["userInteraction"]) -> typing.Union[MetaOapg.properties.userInteraction, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["scope"]) -> typing.Union[MetaOapg.properties.scope, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["confidentialityImpact"]) -> typing.Union[MetaOapg.properties.confidentialityImpact, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["integrityImpact"]) -> typing.Union[MetaOapg.properties.integrityImpact, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["availabilityImpact"]) -> typing.Union[MetaOapg.properties.availabilityImpact, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["baseScore"]) -> MetaOapg.properties.baseScore: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["baseSeverity"]) -> MetaOapg.properties.baseSeverity: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["exploitCodeMaturity"]) -> typing.Union[MetaOapg.properties.exploitCodeMaturity, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["remediationLevel"]) -> typing.Union[MetaOapg.properties.remediationLevel, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["reportConfidence"]) -> typing.Union[MetaOapg.properties.reportConfidence, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["temporalScore"]) -> typing.Union[MetaOapg.properties.temporalScore, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["temporalSeverity"]) -> typing.Union[MetaOapg.properties.temporalSeverity, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["confidentialityRequirement"]) -> typing.Union[MetaOapg.properties.confidentialityRequirement, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["integrityRequirement"]) -> typing.Union[MetaOapg.properties.integrityRequirement, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["availabilityRequirement"]) -> typing.Union[MetaOapg.properties.availabilityRequirement, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["modifiedAttackVector"]) -> typing.Union[MetaOapg.properties.modifiedAttackVector, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["modifiedAttackComplexity"]) -> typing.Union[MetaOapg.properties.modifiedAttackComplexity, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["modifiedPrivilegesRequired"]) -> typing.Union[MetaOapg.properties.modifiedPrivilegesRequired, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["modifiedUserInteraction"]) -> typing.Union[MetaOapg.properties.modifiedUserInteraction, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["modifiedScope"]) -> typing.Union[MetaOapg.properties.modifiedScope, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["modifiedConfidentialityImpact"]) -> typing.Union[MetaOapg.properties.modifiedConfidentialityImpact, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["modifiedIntegrityImpact"]) -> typing.Union[MetaOapg.properties.modifiedIntegrityImpact, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["modifiedAvailabilityImpact"]) -> typing.Union[MetaOapg.properties.modifiedAvailabilityImpact, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["environmentalScore"]) -> typing.Union[MetaOapg.properties.environmentalScore, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["environmentalSeverity"]) -> typing.Union[MetaOapg.properties.environmentalSeverity, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                                                
                                                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["version", "vectorString", "attackVector", "attackComplexity", "privilegesRequired", "userInteraction", "scope", "confidentialityImpact", "integrityImpact", "availabilityImpact", "baseScore", "baseSeverity", "exploitCodeMaturity", "remediationLevel", "reportConfidence", "temporalScore", "temporalSeverity", "confidentialityRequirement", "integrityRequirement", "availabilityRequirement", "modifiedAttackVector", "modifiedAttackComplexity", "modifiedPrivilegesRequired", "modifiedUserInteraction", "modifiedScope", "modifiedConfidentialityImpact", "modifiedIntegrityImpact", "modifiedAvailabilityImpact", "environmentalScore", "environmentalSeverity", ], str]):
                                                                                    return super().get_item_oapg(name)
                                                                                
                                                                            
                                                                                def __new__(
                                                                                    cls,
                                                                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                                                                    baseSeverity: typing.Union[MetaOapg.properties.baseSeverity, str, ],
                                                                                    baseScore: typing.Union[MetaOapg.properties.baseScore, decimal.Decimal, int, float, ],
                                                                                    vectorString: typing.Union[MetaOapg.properties.vectorString, str, ],
                                                                                    version: typing.Union[MetaOapg.properties.version, str, ],
                                                                                    attackVector: typing.Union[MetaOapg.properties.attackVector, str, schemas.Unset] = schemas.unset,
                                                                                    attackComplexity: typing.Union[MetaOapg.properties.attackComplexity, str, schemas.Unset] = schemas.unset,
                                                                                    privilegesRequired: typing.Union[MetaOapg.properties.privilegesRequired, str, schemas.Unset] = schemas.unset,
                                                                                    userInteraction: typing.Union[MetaOapg.properties.userInteraction, str, schemas.Unset] = schemas.unset,
                                                                                    scope: typing.Union[MetaOapg.properties.scope, str, schemas.Unset] = schemas.unset,
                                                                                    confidentialityImpact: typing.Union[MetaOapg.properties.confidentialityImpact, str, schemas.Unset] = schemas.unset,
                                                                                    integrityImpact: typing.Union[MetaOapg.properties.integrityImpact, str, schemas.Unset] = schemas.unset,
                                                                                    availabilityImpact: typing.Union[MetaOapg.properties.availabilityImpact, str, schemas.Unset] = schemas.unset,
                                                                                    exploitCodeMaturity: typing.Union[MetaOapg.properties.exploitCodeMaturity, str, schemas.Unset] = schemas.unset,
                                                                                    remediationLevel: typing.Union[MetaOapg.properties.remediationLevel, str, schemas.Unset] = schemas.unset,
                                                                                    reportConfidence: typing.Union[MetaOapg.properties.reportConfidence, str, schemas.Unset] = schemas.unset,
                                                                                    temporalScore: typing.Union[MetaOapg.properties.temporalScore, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                                                                    temporalSeverity: typing.Union[MetaOapg.properties.temporalSeverity, str, schemas.Unset] = schemas.unset,
                                                                                    confidentialityRequirement: typing.Union[MetaOapg.properties.confidentialityRequirement, str, schemas.Unset] = schemas.unset,
                                                                                    integrityRequirement: typing.Union[MetaOapg.properties.integrityRequirement, str, schemas.Unset] = schemas.unset,
                                                                                    availabilityRequirement: typing.Union[MetaOapg.properties.availabilityRequirement, str, schemas.Unset] = schemas.unset,
                                                                                    modifiedAttackVector: typing.Union[MetaOapg.properties.modifiedAttackVector, str, schemas.Unset] = schemas.unset,
                                                                                    modifiedAttackComplexity: typing.Union[MetaOapg.properties.modifiedAttackComplexity, str, schemas.Unset] = schemas.unset,
                                                                                    modifiedPrivilegesRequired: typing.Union[MetaOapg.properties.modifiedPrivilegesRequired, str, schemas.Unset] = schemas.unset,
                                                                                    modifiedUserInteraction: typing.Union[MetaOapg.properties.modifiedUserInteraction, str, schemas.Unset] = schemas.unset,
                                                                                    modifiedScope: typing.Union[MetaOapg.properties.modifiedScope, str, schemas.Unset] = schemas.unset,
                                                                                    modifiedConfidentialityImpact: typing.Union[MetaOapg.properties.modifiedConfidentialityImpact, str, schemas.Unset] = schemas.unset,
                                                                                    modifiedIntegrityImpact: typing.Union[MetaOapg.properties.modifiedIntegrityImpact, str, schemas.Unset] = schemas.unset,
                                                                                    modifiedAvailabilityImpact: typing.Union[MetaOapg.properties.modifiedAvailabilityImpact, str, schemas.Unset] = schemas.unset,
                                                                                    environmentalScore: typing.Union[MetaOapg.properties.environmentalScore, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                                                                    environmentalSeverity: typing.Union[MetaOapg.properties.environmentalSeverity, str, schemas.Unset] = schemas.unset,
                                                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                                                ) -> 'cvssData':
                                                                                    return super().__new__(
                                                                                        cls,
                                                                                        *args,
                                                                                        baseSeverity=baseSeverity,
                                                                                        baseScore=baseScore,
                                                                                        vectorString=vectorString,
                                                                                        version=version,
                                                                                        attackVector=attackVector,
                                                                                        attackComplexity=attackComplexity,
                                                                                        privilegesRequired=privilegesRequired,
                                                                                        userInteraction=userInteraction,
                                                                                        scope=scope,
                                                                                        confidentialityImpact=confidentialityImpact,
                                                                                        integrityImpact=integrityImpact,
                                                                                        availabilityImpact=availabilityImpact,
                                                                                        exploitCodeMaturity=exploitCodeMaturity,
                                                                                        remediationLevel=remediationLevel,
                                                                                        reportConfidence=reportConfidence,
                                                                                        temporalScore=temporalScore,
                                                                                        temporalSeverity=temporalSeverity,
                                                                                        confidentialityRequirement=confidentialityRequirement,
                                                                                        integrityRequirement=integrityRequirement,
                                                                                        availabilityRequirement=availabilityRequirement,
                                                                                        modifiedAttackVector=modifiedAttackVector,
                                                                                        modifiedAttackComplexity=modifiedAttackComplexity,
                                                                                        modifiedPrivilegesRequired=modifiedPrivilegesRequired,
                                                                                        modifiedUserInteraction=modifiedUserInteraction,
                                                                                        modifiedScope=modifiedScope,
                                                                                        modifiedConfidentialityImpact=modifiedConfidentialityImpact,
                                                                                        modifiedIntegrityImpact=modifiedIntegrityImpact,
                                                                                        modifiedAvailabilityImpact=modifiedAvailabilityImpact,
                                                                                        environmentalScore=environmentalScore,
                                                                                        environmentalSeverity=environmentalSeverity,
                                                                                        _configuration=_configuration,
                                                                                        **kwargs,
                                                                                    )
                                                                            
                                                                            
                                                                            class exploitabilityScore(
                                                                                schemas.NumberSchema
                                                                            ):
                                                                            
                                                                            
                                                                                class MetaOapg:
                                                                                    inclusive_maximum = 10
                                                                                    inclusive_minimum = 0
                                                                            
                                                                            
                                                                            class impactScore(
                                                                                schemas.NumberSchema
                                                                            ):
                                                                            
                                                                            
                                                                                class MetaOapg:
                                                                                    inclusive_maximum = 10
                                                                                    inclusive_minimum = 0
                                                                            __annotations__ = {
                                                                                "source": source,
                                                                                "type": type,
                                                                                "cvssData": cvssData,
                                                                                "exploitabilityScore": exploitabilityScore,
                                                                                "impactScore": impactScore,
                                                                            }
                                                                        additional_properties = schemas.NotAnyTypeSchema
                                                                    
                                                                    cvssData: MetaOapg.properties.cvssData
                                                                    source: MetaOapg.properties.source
                                                                    type: MetaOapg.properties.type
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["cvssData"]) -> MetaOapg.properties.cvssData: ...
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["exploitabilityScore"]) -> MetaOapg.properties.exploitabilityScore: ...
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["impactScore"]) -> MetaOapg.properties.impactScore: ...
                                                                    
                                                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cvssData"], typing_extensions.Literal["source"], typing_extensions.Literal["type"], typing_extensions.Literal["exploitabilityScore"], typing_extensions.Literal["impactScore"], ]):
                                                                        # dict_instance[name] accessor
                                                                        return super().__getitem__(name)
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["cvssData"]) -> MetaOapg.properties.cvssData: ...
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["exploitabilityScore"]) -> typing.Union[MetaOapg.properties.exploitabilityScore, schemas.Unset]: ...
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["impactScore"]) -> typing.Union[MetaOapg.properties.impactScore, schemas.Unset]: ...
                                                                    
                                                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cvssData"], typing_extensions.Literal["source"], typing_extensions.Literal["type"], typing_extensions.Literal["exploitabilityScore"], typing_extensions.Literal["impactScore"], ]):
                                                                        return super().get_item_oapg(name)
                                                                
                                                                    def __new__(
                                                                        cls,
                                                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                                                        cvssData: typing.Union[MetaOapg.properties.cvssData, dict, frozendict.frozendict, ],
                                                                        source: typing.Union[MetaOapg.properties.source, str, ],
                                                                        type: typing.Union[MetaOapg.properties.type, dict, frozendict.frozendict, ],
                                                                        exploitabilityScore: typing.Union[MetaOapg.properties.exploitabilityScore, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                                                        impactScore: typing.Union[MetaOapg.properties.impactScore, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                                    ) -> 'items':
                                                                        return super().__new__(
                                                                            cls,
                                                                            *args,
                                                                            cvssData=cvssData,
                                                                            source=source,
                                                                            type=type,
                                                                            exploitabilityScore=exploitabilityScore,
                                                                            impactScore=impactScore,
                                                                            _configuration=_configuration,
                                                                        )
                                                        
                                                            def __new__(
                                                                cls,
                                                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                            ) -> 'cvssMetricV30':
                                                                return super().__new__(
                                                                    cls,
                                                                    arg,
                                                                    _configuration=_configuration,
                                                                )
                                                        
                                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                                return super().__getitem__(i)
                                                        
                                                        
                                                        class cvssMetricV2(
                                                            schemas.ListSchema
                                                        ):
                                                        
                                                        
                                                            class MetaOapg:
                                                                
                                                                
                                                                class items(
                                                                    schemas.DictSchema
                                                                ):
                                                                
                                                                
                                                                    class MetaOapg:
                                                                        required = {
                                                                            "cvssData",
                                                                            "source",
                                                                            "type",
                                                                        }
                                                                        
                                                                        class properties:
                                                                            source = schemas.StrSchema
                                                                            type = schemas.DictSchema
                                                                            
                                                                            
                                                                            class cvssData(
                                                                                schemas.DictSchema
                                                                            ):
                                                                            
                                                                            
                                                                                class MetaOapg:
                                                                                    required = {
                                                                                        "baseScore",
                                                                                        "vectorString",
                                                                                        "version",
                                                                                    }
                                                                                    
                                                                                    class properties:
                                                                                        
                                                                                        
                                                                                        class version(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "2.0": "POSITIVE_2_PT_0",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def POSITIVE_2_PT_0(cls):
                                                                                                return cls("2.0")
                                                                                        
                                                                                        
                                                                                        class vectorString(
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                regex=[{
                                                                                                    'pattern': r'^((AV:[NAL]|AC:[LMH]|Au:[MSN]|[CIA]:[NPC]|E:(U|POC|F|H|ND)|RL:(OF|TF|W|U|ND)|RC:(UC|UR|C|ND)|CDP:(N|L|LM|MH|H|ND)|TD:(N|L|M|H|ND)|[CIA]R:(L|M|H|ND))/)*(AV:[NAL]|AC:[LMH]|Au:[MSN]|[CIA]:[NPC]|E:(U|POC|F|H|ND)|RL:(OF|TF|W|U|ND)|RC:(UC|UR|C|ND)|CDP:(N|L|LM|MH|H|ND)|TD:(N|L|M|H|ND)|[CIA]R:(L|M|H|ND))$',  # noqa: E501
                                                                                                }]
                                                                                        
                                                                                        
                                                                                        class accessVector(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "NETWORK": "NETWORK",
                                                                                                    "ADJACENT_NETWORK": "ADJACENT_NETWORK",
                                                                                                    "LOCAL": "LOCAL",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NETWORK(cls):
                                                                                                return cls("NETWORK")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def ADJACENT_NETWORK(cls):
                                                                                                return cls("ADJACENT_NETWORK")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOCAL(cls):
                                                                                                return cls("LOCAL")
                                                                                        
                                                                                        
                                                                                        class accessComplexity(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "HIGH": "HIGH",
                                                                                                    "MEDIUM": "MEDIUM",
                                                                                                    "LOW": "LOW",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def MEDIUM(cls):
                                                                                                return cls("MEDIUM")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOW(cls):
                                                                                                return cls("LOW")
                                                                                        
                                                                                        
                                                                                        class authentication(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "MULTIPLE": "MULTIPLE",
                                                                                                    "SINGLE": "SINGLE",
                                                                                                    "NONE": "NONE",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def MULTIPLE(cls):
                                                                                                return cls("MULTIPLE")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def SINGLE(cls):
                                                                                                return cls("SINGLE")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NONE(cls):
                                                                                                return cls("NONE")
                                                                                        
                                                                                        
                                                                                        class confidentialityImpact(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "NONE": "NONE",
                                                                                                    "PARTIAL": "PARTIAL",
                                                                                                    "COMPLETE": "COMPLETE",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NONE(cls):
                                                                                                return cls("NONE")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def PARTIAL(cls):
                                                                                                return cls("PARTIAL")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def COMPLETE(cls):
                                                                                                return cls("COMPLETE")
                                                                                        
                                                                                        
                                                                                        class integrityImpact(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "NONE": "NONE",
                                                                                                    "PARTIAL": "PARTIAL",
                                                                                                    "COMPLETE": "COMPLETE",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NONE(cls):
                                                                                                return cls("NONE")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def PARTIAL(cls):
                                                                                                return cls("PARTIAL")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def COMPLETE(cls):
                                                                                                return cls("COMPLETE")
                                                                                        
                                                                                        
                                                                                        class availabilityImpact(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "NONE": "NONE",
                                                                                                    "PARTIAL": "PARTIAL",
                                                                                                    "COMPLETE": "COMPLETE",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NONE(cls):
                                                                                                return cls("NONE")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def PARTIAL(cls):
                                                                                                return cls("PARTIAL")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def COMPLETE(cls):
                                                                                                return cls("COMPLETE")
                                                                                        
                                                                                        
                                                                                        class baseScore(
                                                                                            schemas.NumberSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                inclusive_maximum = 10
                                                                                                inclusive_minimum = 0
                                                                                        
                                                                                        
                                                                                        class exploitability(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "UNPROVEN": "UNPROVEN",
                                                                                                    "PROOF_OF_CONCEPT": "PROOF_OF_CONCEPT",
                                                                                                    "FUNCTIONAL": "FUNCTIONAL",
                                                                                                    "HIGH": "HIGH",
                                                                                                    "NOT_DEFINED": "NOT_DEFINED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def UNPROVEN(cls):
                                                                                                return cls("UNPROVEN")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def PROOF_OF_CONCEPT(cls):
                                                                                                return cls("PROOF_OF_CONCEPT")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def FUNCTIONAL(cls):
                                                                                                return cls("FUNCTIONAL")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NOT_DEFINED(cls):
                                                                                                return cls("NOT_DEFINED")
                                                                                        
                                                                                        
                                                                                        class remediationLevel(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "OFFICIAL_FIX": "OFFICIAL_FIX",
                                                                                                    "TEMPORARY_FIX": "TEMPORARY_FIX",
                                                                                                    "WORKAROUND": "WORKAROUND",
                                                                                                    "UNAVAILABLE": "UNAVAILABLE",
                                                                                                    "NOT_DEFINED": "NOT_DEFINED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def OFFICIAL_FIX(cls):
                                                                                                return cls("OFFICIAL_FIX")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def TEMPORARY_FIX(cls):
                                                                                                return cls("TEMPORARY_FIX")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def WORKAROUND(cls):
                                                                                                return cls("WORKAROUND")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def UNAVAILABLE(cls):
                                                                                                return cls("UNAVAILABLE")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NOT_DEFINED(cls):
                                                                                                return cls("NOT_DEFINED")
                                                                                        
                                                                                        
                                                                                        class reportConfidence(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "UNCONFIRMED": "UNCONFIRMED",
                                                                                                    "UNCORROBORATED": "UNCORROBORATED",
                                                                                                    "CONFIRMED": "CONFIRMED",
                                                                                                    "NOT_DEFINED": "NOT_DEFINED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def UNCONFIRMED(cls):
                                                                                                return cls("UNCONFIRMED")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def UNCORROBORATED(cls):
                                                                                                return cls("UNCORROBORATED")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def CONFIRMED(cls):
                                                                                                return cls("CONFIRMED")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NOT_DEFINED(cls):
                                                                                                return cls("NOT_DEFINED")
                                                                                        
                                                                                        
                                                                                        class temporalScore(
                                                                                            schemas.NumberSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                inclusive_maximum = 10
                                                                                                inclusive_minimum = 0
                                                                                        
                                                                                        
                                                                                        class collateralDamagePotential(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "NONE": "NONE",
                                                                                                    "LOW": "LOW",
                                                                                                    "LOW_MEDIUM": "LOW_MEDIUM",
                                                                                                    "MEDIUM_HIGH": "MEDIUM_HIGH",
                                                                                                    "HIGH": "HIGH",
                                                                                                    "NOT_DEFINED": "NOT_DEFINED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NONE(cls):
                                                                                                return cls("NONE")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOW(cls):
                                                                                                return cls("LOW")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOW_MEDIUM(cls):
                                                                                                return cls("LOW_MEDIUM")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def MEDIUM_HIGH(cls):
                                                                                                return cls("MEDIUM_HIGH")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NOT_DEFINED(cls):
                                                                                                return cls("NOT_DEFINED")
                                                                                        
                                                                                        
                                                                                        class targetDistribution(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "NONE": "NONE",
                                                                                                    "LOW": "LOW",
                                                                                                    "MEDIUM": "MEDIUM",
                                                                                                    "HIGH": "HIGH",
                                                                                                    "NOT_DEFINED": "NOT_DEFINED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NONE(cls):
                                                                                                return cls("NONE")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOW(cls):
                                                                                                return cls("LOW")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def MEDIUM(cls):
                                                                                                return cls("MEDIUM")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NOT_DEFINED(cls):
                                                                                                return cls("NOT_DEFINED")
                                                                                        
                                                                                        
                                                                                        class confidentialityRequirement(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "LOW": "LOW",
                                                                                                    "MEDIUM": "MEDIUM",
                                                                                                    "HIGH": "HIGH",
                                                                                                    "NOT_DEFINED": "NOT_DEFINED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOW(cls):
                                                                                                return cls("LOW")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def MEDIUM(cls):
                                                                                                return cls("MEDIUM")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NOT_DEFINED(cls):
                                                                                                return cls("NOT_DEFINED")
                                                                                        
                                                                                        
                                                                                        class integrityRequirement(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "LOW": "LOW",
                                                                                                    "MEDIUM": "MEDIUM",
                                                                                                    "HIGH": "HIGH",
                                                                                                    "NOT_DEFINED": "NOT_DEFINED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOW(cls):
                                                                                                return cls("LOW")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def MEDIUM(cls):
                                                                                                return cls("MEDIUM")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NOT_DEFINED(cls):
                                                                                                return cls("NOT_DEFINED")
                                                                                        
                                                                                        
                                                                                        class availabilityRequirement(
                                                                                            schemas.EnumBase,
                                                                                            schemas.StrSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                enum_value_to_name = {
                                                                                                    "LOW": "LOW",
                                                                                                    "MEDIUM": "MEDIUM",
                                                                                                    "HIGH": "HIGH",
                                                                                                    "NOT_DEFINED": "NOT_DEFINED",
                                                                                                }
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def LOW(cls):
                                                                                                return cls("LOW")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def MEDIUM(cls):
                                                                                                return cls("MEDIUM")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def HIGH(cls):
                                                                                                return cls("HIGH")
                                                                                            
                                                                                            @schemas.classproperty
                                                                                            def NOT_DEFINED(cls):
                                                                                                return cls("NOT_DEFINED")
                                                                                        
                                                                                        
                                                                                        class environmentalScore(
                                                                                            schemas.NumberSchema
                                                                                        ):
                                                                                        
                                                                                        
                                                                                            class MetaOapg:
                                                                                                inclusive_maximum = 10
                                                                                                inclusive_minimum = 0
                                                                                        __annotations__ = {
                                                                                            "version": version,
                                                                                            "vectorString": vectorString,
                                                                                            "accessVector": accessVector,
                                                                                            "accessComplexity": accessComplexity,
                                                                                            "authentication": authentication,
                                                                                            "confidentialityImpact": confidentialityImpact,
                                                                                            "integrityImpact": integrityImpact,
                                                                                            "availabilityImpact": availabilityImpact,
                                                                                            "baseScore": baseScore,
                                                                                            "exploitability": exploitability,
                                                                                            "remediationLevel": remediationLevel,
                                                                                            "reportConfidence": reportConfidence,
                                                                                            "temporalScore": temporalScore,
                                                                                            "collateralDamagePotential": collateralDamagePotential,
                                                                                            "targetDistribution": targetDistribution,
                                                                                            "confidentialityRequirement": confidentialityRequirement,
                                                                                            "integrityRequirement": integrityRequirement,
                                                                                            "availabilityRequirement": availabilityRequirement,
                                                                                            "environmentalScore": environmentalScore,
                                                                                        }
                                                                                
                                                                                baseScore: MetaOapg.properties.baseScore
                                                                                vectorString: MetaOapg.properties.vectorString
                                                                                version: MetaOapg.properties.version
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["vectorString"]) -> MetaOapg.properties.vectorString: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["accessVector"]) -> MetaOapg.properties.accessVector: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["accessComplexity"]) -> MetaOapg.properties.accessComplexity: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["authentication"]) -> MetaOapg.properties.authentication: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["confidentialityImpact"]) -> MetaOapg.properties.confidentialityImpact: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["integrityImpact"]) -> MetaOapg.properties.integrityImpact: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["availabilityImpact"]) -> MetaOapg.properties.availabilityImpact: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["baseScore"]) -> MetaOapg.properties.baseScore: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["exploitability"]) -> MetaOapg.properties.exploitability: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["remediationLevel"]) -> MetaOapg.properties.remediationLevel: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["reportConfidence"]) -> MetaOapg.properties.reportConfidence: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["temporalScore"]) -> MetaOapg.properties.temporalScore: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["collateralDamagePotential"]) -> MetaOapg.properties.collateralDamagePotential: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["targetDistribution"]) -> MetaOapg.properties.targetDistribution: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["confidentialityRequirement"]) -> MetaOapg.properties.confidentialityRequirement: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["integrityRequirement"]) -> MetaOapg.properties.integrityRequirement: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["availabilityRequirement"]) -> MetaOapg.properties.availabilityRequirement: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: typing_extensions.Literal["environmentalScore"]) -> MetaOapg.properties.environmentalScore: ...
                                                                                
                                                                                @typing.overload
                                                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                                                
                                                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["version", "vectorString", "accessVector", "accessComplexity", "authentication", "confidentialityImpact", "integrityImpact", "availabilityImpact", "baseScore", "exploitability", "remediationLevel", "reportConfidence", "temporalScore", "collateralDamagePotential", "targetDistribution", "confidentialityRequirement", "integrityRequirement", "availabilityRequirement", "environmentalScore", ], str]):
                                                                                    # dict_instance[name] accessor
                                                                                    return super().__getitem__(name)
                                                                                
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["vectorString"]) -> MetaOapg.properties.vectorString: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["accessVector"]) -> typing.Union[MetaOapg.properties.accessVector, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["accessComplexity"]) -> typing.Union[MetaOapg.properties.accessComplexity, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["authentication"]) -> typing.Union[MetaOapg.properties.authentication, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["confidentialityImpact"]) -> typing.Union[MetaOapg.properties.confidentialityImpact, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["integrityImpact"]) -> typing.Union[MetaOapg.properties.integrityImpact, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["availabilityImpact"]) -> typing.Union[MetaOapg.properties.availabilityImpact, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["baseScore"]) -> MetaOapg.properties.baseScore: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["exploitability"]) -> typing.Union[MetaOapg.properties.exploitability, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["remediationLevel"]) -> typing.Union[MetaOapg.properties.remediationLevel, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["reportConfidence"]) -> typing.Union[MetaOapg.properties.reportConfidence, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["temporalScore"]) -> typing.Union[MetaOapg.properties.temporalScore, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["collateralDamagePotential"]) -> typing.Union[MetaOapg.properties.collateralDamagePotential, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["targetDistribution"]) -> typing.Union[MetaOapg.properties.targetDistribution, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["confidentialityRequirement"]) -> typing.Union[MetaOapg.properties.confidentialityRequirement, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["integrityRequirement"]) -> typing.Union[MetaOapg.properties.integrityRequirement, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["availabilityRequirement"]) -> typing.Union[MetaOapg.properties.availabilityRequirement, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: typing_extensions.Literal["environmentalScore"]) -> typing.Union[MetaOapg.properties.environmentalScore, schemas.Unset]: ...
                                                                                
                                                                                @typing.overload
                                                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                                                
                                                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["version", "vectorString", "accessVector", "accessComplexity", "authentication", "confidentialityImpact", "integrityImpact", "availabilityImpact", "baseScore", "exploitability", "remediationLevel", "reportConfidence", "temporalScore", "collateralDamagePotential", "targetDistribution", "confidentialityRequirement", "integrityRequirement", "availabilityRequirement", "environmentalScore", ], str]):
                                                                                    return super().get_item_oapg(name)
                                                                                
                                                                            
                                                                                def __new__(
                                                                                    cls,
                                                                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                                                                    baseScore: typing.Union[MetaOapg.properties.baseScore, decimal.Decimal, int, float, ],
                                                                                    vectorString: typing.Union[MetaOapg.properties.vectorString, str, ],
                                                                                    version: typing.Union[MetaOapg.properties.version, str, ],
                                                                                    accessVector: typing.Union[MetaOapg.properties.accessVector, str, schemas.Unset] = schemas.unset,
                                                                                    accessComplexity: typing.Union[MetaOapg.properties.accessComplexity, str, schemas.Unset] = schemas.unset,
                                                                                    authentication: typing.Union[MetaOapg.properties.authentication, str, schemas.Unset] = schemas.unset,
                                                                                    confidentialityImpact: typing.Union[MetaOapg.properties.confidentialityImpact, str, schemas.Unset] = schemas.unset,
                                                                                    integrityImpact: typing.Union[MetaOapg.properties.integrityImpact, str, schemas.Unset] = schemas.unset,
                                                                                    availabilityImpact: typing.Union[MetaOapg.properties.availabilityImpact, str, schemas.Unset] = schemas.unset,
                                                                                    exploitability: typing.Union[MetaOapg.properties.exploitability, str, schemas.Unset] = schemas.unset,
                                                                                    remediationLevel: typing.Union[MetaOapg.properties.remediationLevel, str, schemas.Unset] = schemas.unset,
                                                                                    reportConfidence: typing.Union[MetaOapg.properties.reportConfidence, str, schemas.Unset] = schemas.unset,
                                                                                    temporalScore: typing.Union[MetaOapg.properties.temporalScore, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                                                                    collateralDamagePotential: typing.Union[MetaOapg.properties.collateralDamagePotential, str, schemas.Unset] = schemas.unset,
                                                                                    targetDistribution: typing.Union[MetaOapg.properties.targetDistribution, str, schemas.Unset] = schemas.unset,
                                                                                    confidentialityRequirement: typing.Union[MetaOapg.properties.confidentialityRequirement, str, schemas.Unset] = schemas.unset,
                                                                                    integrityRequirement: typing.Union[MetaOapg.properties.integrityRequirement, str, schemas.Unset] = schemas.unset,
                                                                                    availabilityRequirement: typing.Union[MetaOapg.properties.availabilityRequirement, str, schemas.Unset] = schemas.unset,
                                                                                    environmentalScore: typing.Union[MetaOapg.properties.environmentalScore, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                                                ) -> 'cvssData':
                                                                                    return super().__new__(
                                                                                        cls,
                                                                                        *args,
                                                                                        baseScore=baseScore,
                                                                                        vectorString=vectorString,
                                                                                        version=version,
                                                                                        accessVector=accessVector,
                                                                                        accessComplexity=accessComplexity,
                                                                                        authentication=authentication,
                                                                                        confidentialityImpact=confidentialityImpact,
                                                                                        integrityImpact=integrityImpact,
                                                                                        availabilityImpact=availabilityImpact,
                                                                                        exploitability=exploitability,
                                                                                        remediationLevel=remediationLevel,
                                                                                        reportConfidence=reportConfidence,
                                                                                        temporalScore=temporalScore,
                                                                                        collateralDamagePotential=collateralDamagePotential,
                                                                                        targetDistribution=targetDistribution,
                                                                                        confidentialityRequirement=confidentialityRequirement,
                                                                                        integrityRequirement=integrityRequirement,
                                                                                        availabilityRequirement=availabilityRequirement,
                                                                                        environmentalScore=environmentalScore,
                                                                                        _configuration=_configuration,
                                                                                        **kwargs,
                                                                                    )
                                                                            baseSeverity = schemas.StrSchema
                                                                            
                                                                            
                                                                            class exploitabilityScore(
                                                                                schemas.NumberSchema
                                                                            ):
                                                                            
                                                                            
                                                                                class MetaOapg:
                                                                                    inclusive_maximum = 10
                                                                                    inclusive_minimum = 0
                                                                            
                                                                            
                                                                            class impactScore(
                                                                                schemas.NumberSchema
                                                                            ):
                                                                            
                                                                            
                                                                                class MetaOapg:
                                                                                    inclusive_maximum = 10
                                                                                    inclusive_minimum = 0
                                                                            acInsufInfo = schemas.BoolSchema
                                                                            obtainAllPrivilege = schemas.BoolSchema
                                                                            obtainUserPrivilege = schemas.BoolSchema
                                                                            obtainOtherPrivilege = schemas.BoolSchema
                                                                            userInteractionRequired = schemas.BoolSchema
                                                                            __annotations__ = {
                                                                                "source": source,
                                                                                "type": type,
                                                                                "cvssData": cvssData,
                                                                                "baseSeverity": baseSeverity,
                                                                                "exploitabilityScore": exploitabilityScore,
                                                                                "impactScore": impactScore,
                                                                                "acInsufInfo": acInsufInfo,
                                                                                "obtainAllPrivilege": obtainAllPrivilege,
                                                                                "obtainUserPrivilege": obtainUserPrivilege,
                                                                                "obtainOtherPrivilege": obtainOtherPrivilege,
                                                                                "userInteractionRequired": userInteractionRequired,
                                                                            }
                                                                        additional_properties = schemas.NotAnyTypeSchema
                                                                    
                                                                    cvssData: MetaOapg.properties.cvssData
                                                                    source: MetaOapg.properties.source
                                                                    type: MetaOapg.properties.type
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["cvssData"]) -> MetaOapg.properties.cvssData: ...
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["baseSeverity"]) -> MetaOapg.properties.baseSeverity: ...
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["exploitabilityScore"]) -> MetaOapg.properties.exploitabilityScore: ...
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["impactScore"]) -> MetaOapg.properties.impactScore: ...
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["acInsufInfo"]) -> MetaOapg.properties.acInsufInfo: ...
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["obtainAllPrivilege"]) -> MetaOapg.properties.obtainAllPrivilege: ...
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["obtainUserPrivilege"]) -> MetaOapg.properties.obtainUserPrivilege: ...
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["obtainOtherPrivilege"]) -> MetaOapg.properties.obtainOtherPrivilege: ...
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["userInteractionRequired"]) -> MetaOapg.properties.userInteractionRequired: ...
                                                                    
                                                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cvssData"], typing_extensions.Literal["source"], typing_extensions.Literal["type"], typing_extensions.Literal["baseSeverity"], typing_extensions.Literal["exploitabilityScore"], typing_extensions.Literal["impactScore"], typing_extensions.Literal["acInsufInfo"], typing_extensions.Literal["obtainAllPrivilege"], typing_extensions.Literal["obtainUserPrivilege"], typing_extensions.Literal["obtainOtherPrivilege"], typing_extensions.Literal["userInteractionRequired"], ]):
                                                                        # dict_instance[name] accessor
                                                                        return super().__getitem__(name)
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["cvssData"]) -> MetaOapg.properties.cvssData: ...
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["baseSeverity"]) -> typing.Union[MetaOapg.properties.baseSeverity, schemas.Unset]: ...
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["exploitabilityScore"]) -> typing.Union[MetaOapg.properties.exploitabilityScore, schemas.Unset]: ...
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["impactScore"]) -> typing.Union[MetaOapg.properties.impactScore, schemas.Unset]: ...
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["acInsufInfo"]) -> typing.Union[MetaOapg.properties.acInsufInfo, schemas.Unset]: ...
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["obtainAllPrivilege"]) -> typing.Union[MetaOapg.properties.obtainAllPrivilege, schemas.Unset]: ...
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["obtainUserPrivilege"]) -> typing.Union[MetaOapg.properties.obtainUserPrivilege, schemas.Unset]: ...
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["obtainOtherPrivilege"]) -> typing.Union[MetaOapg.properties.obtainOtherPrivilege, schemas.Unset]: ...
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["userInteractionRequired"]) -> typing.Union[MetaOapg.properties.userInteractionRequired, schemas.Unset]: ...
                                                                    
                                                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cvssData"], typing_extensions.Literal["source"], typing_extensions.Literal["type"], typing_extensions.Literal["baseSeverity"], typing_extensions.Literal["exploitabilityScore"], typing_extensions.Literal["impactScore"], typing_extensions.Literal["acInsufInfo"], typing_extensions.Literal["obtainAllPrivilege"], typing_extensions.Literal["obtainUserPrivilege"], typing_extensions.Literal["obtainOtherPrivilege"], typing_extensions.Literal["userInteractionRequired"], ]):
                                                                        return super().get_item_oapg(name)
                                                                
                                                                    def __new__(
                                                                        cls,
                                                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                                                        cvssData: typing.Union[MetaOapg.properties.cvssData, dict, frozendict.frozendict, ],
                                                                        source: typing.Union[MetaOapg.properties.source, str, ],
                                                                        type: typing.Union[MetaOapg.properties.type, dict, frozendict.frozendict, ],
                                                                        baseSeverity: typing.Union[MetaOapg.properties.baseSeverity, str, schemas.Unset] = schemas.unset,
                                                                        exploitabilityScore: typing.Union[MetaOapg.properties.exploitabilityScore, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                                                        impactScore: typing.Union[MetaOapg.properties.impactScore, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                                                        acInsufInfo: typing.Union[MetaOapg.properties.acInsufInfo, bool, schemas.Unset] = schemas.unset,
                                                                        obtainAllPrivilege: typing.Union[MetaOapg.properties.obtainAllPrivilege, bool, schemas.Unset] = schemas.unset,
                                                                        obtainUserPrivilege: typing.Union[MetaOapg.properties.obtainUserPrivilege, bool, schemas.Unset] = schemas.unset,
                                                                        obtainOtherPrivilege: typing.Union[MetaOapg.properties.obtainOtherPrivilege, bool, schemas.Unset] = schemas.unset,
                                                                        userInteractionRequired: typing.Union[MetaOapg.properties.userInteractionRequired, bool, schemas.Unset] = schemas.unset,
                                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                                    ) -> 'items':
                                                                        return super().__new__(
                                                                            cls,
                                                                            *args,
                                                                            cvssData=cvssData,
                                                                            source=source,
                                                                            type=type,
                                                                            baseSeverity=baseSeverity,
                                                                            exploitabilityScore=exploitabilityScore,
                                                                            impactScore=impactScore,
                                                                            acInsufInfo=acInsufInfo,
                                                                            obtainAllPrivilege=obtainAllPrivilege,
                                                                            obtainUserPrivilege=obtainUserPrivilege,
                                                                            obtainOtherPrivilege=obtainOtherPrivilege,
                                                                            userInteractionRequired=userInteractionRequired,
                                                                            _configuration=_configuration,
                                                                        )
                                                        
                                                            def __new__(
                                                                cls,
                                                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                            ) -> 'cvssMetricV2':
                                                                return super().__new__(
                                                                    cls,
                                                                    arg,
                                                                    _configuration=_configuration,
                                                                )
                                                        
                                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                                return super().__getitem__(i)
                                                        __annotations__ = {
                                                            "cvssMetricV31": cvssMetricV31,
                                                            "cvssMetricV30": cvssMetricV30,
                                                            "cvssMetricV2": cvssMetricV2,
                                                        }
                                                    additional_properties = schemas.NotAnyTypeSchema
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["cvssMetricV31"]) -> MetaOapg.properties.cvssMetricV31: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["cvssMetricV30"]) -> MetaOapg.properties.cvssMetricV30: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["cvssMetricV2"]) -> MetaOapg.properties.cvssMetricV2: ...
                                                
                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["cvssMetricV31"], typing_extensions.Literal["cvssMetricV30"], typing_extensions.Literal["cvssMetricV2"], ]):
                                                    # dict_instance[name] accessor
                                                    return super().__getitem__(name)
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["cvssMetricV31"]) -> typing.Union[MetaOapg.properties.cvssMetricV31, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["cvssMetricV30"]) -> typing.Union[MetaOapg.properties.cvssMetricV30, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["cvssMetricV2"]) -> typing.Union[MetaOapg.properties.cvssMetricV2, schemas.Unset]: ...
                                                
                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cvssMetricV31"], typing_extensions.Literal["cvssMetricV30"], typing_extensions.Literal["cvssMetricV2"], ]):
                                                    return super().get_item_oapg(name)
                                            
                                                def __new__(
                                                    cls,
                                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                                    cvssMetricV31: typing.Union[MetaOapg.properties.cvssMetricV31, list, tuple, schemas.Unset] = schemas.unset,
                                                    cvssMetricV30: typing.Union[MetaOapg.properties.cvssMetricV30, list, tuple, schemas.Unset] = schemas.unset,
                                                    cvssMetricV2: typing.Union[MetaOapg.properties.cvssMetricV2, list, tuple, schemas.Unset] = schemas.unset,
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'metrics':
                                                    return super().__new__(
                                                        cls,
                                                        *args,
                                                        cvssMetricV31=cvssMetricV31,
                                                        cvssMetricV30=cvssMetricV30,
                                                        cvssMetricV2=cvssMetricV2,
                                                        _configuration=_configuration,
                                                    )
                                            
                                            
                                            class weaknesses(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    
                                                    class items(
                                                        schemas.DictSchema
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            required = {
                                                                "description",
                                                                "source",
                                                                "type",
                                                            }
                                                            
                                                            class properties:
                                                                source = schemas.StrSchema
                                                                type = schemas.StrSchema
                                                                
                                                                
                                                                class description(
                                                                    schemas.ListSchema
                                                                ):
                                                                
                                                                
                                                                    class MetaOapg:
                                                                        min_items = 0
                                                                        
                                                                        
                                                                        class items(
                                                                            schemas.DictSchema
                                                                        ):
                                                                        
                                                                        
                                                                            class MetaOapg:
                                                                                required = {
                                                                                    "lang",
                                                                                    "value",
                                                                                }
                                                                                
                                                                                class properties:
                                                                                    lang = schemas.StrSchema
                                                                                    
                                                                                    
                                                                                    class value(
                                                                                        schemas.StrSchema
                                                                                    ):
                                                                                    
                                                                                    
                                                                                        class MetaOapg:
                                                                                            max_length = 4096
                                                                                    __annotations__ = {
                                                                                        "lang": lang,
                                                                                        "value": value,
                                                                                    }
                                                                                additional_properties = schemas.NotAnyTypeSchema
                                                                            
                                                                            lang: MetaOapg.properties.lang
                                                                            value: MetaOapg.properties.value
                                                                            
                                                                            @typing.overload
                                                                            def __getitem__(self, name: typing_extensions.Literal["lang"]) -> MetaOapg.properties.lang: ...
                                                                            
                                                                            @typing.overload
                                                                            def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                                                                            
                                                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["lang"], typing_extensions.Literal["value"], ]):
                                                                                # dict_instance[name] accessor
                                                                                return super().__getitem__(name)
                                                                            
                                                                            @typing.overload
                                                                            def get_item_oapg(self, name: typing_extensions.Literal["lang"]) -> MetaOapg.properties.lang: ...
                                                                            
                                                                            @typing.overload
                                                                            def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                                                                            
                                                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["lang"], typing_extensions.Literal["value"], ]):
                                                                                return super().get_item_oapg(name)
                                                                        
                                                                            def __new__(
                                                                                cls,
                                                                                *args: typing.Union[dict, frozendict.frozendict, ],
                                                                                lang: typing.Union[MetaOapg.properties.lang, str, ],
                                                                                value: typing.Union[MetaOapg.properties.value, str, ],
                                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                                            ) -> 'items':
                                                                                return super().__new__(
                                                                                    cls,
                                                                                    *args,
                                                                                    lang=lang,
                                                                                    value=value,
                                                                                    _configuration=_configuration,
                                                                                )
                                                                
                                                                    def __new__(
                                                                        cls,
                                                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                                    ) -> 'description':
                                                                        return super().__new__(
                                                                            cls,
                                                                            arg,
                                                                            _configuration=_configuration,
                                                                        )
                                                                
                                                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                                                        return super().__getitem__(i)
                                                                __annotations__ = {
                                                                    "source": source,
                                                                    "type": type,
                                                                    "description": description,
                                                                }
                                                            additional_properties = schemas.NotAnyTypeSchema
                                                        
                                                        description: MetaOapg.properties.description
                                                        source: MetaOapg.properties.source
                                                        type: MetaOapg.properties.type
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                                        
                                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["description"], typing_extensions.Literal["source"], typing_extensions.Literal["type"], ]):
                                                            # dict_instance[name] accessor
                                                            return super().__getitem__(name)
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                                        
                                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description"], typing_extensions.Literal["source"], typing_extensions.Literal["type"], ]):
                                                            return super().get_item_oapg(name)
                                                    
                                                        def __new__(
                                                            cls,
                                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                                            description: typing.Union[MetaOapg.properties.description, list, tuple, ],
                                                            source: typing.Union[MetaOapg.properties.source, str, ],
                                                            type: typing.Union[MetaOapg.properties.type, str, ],
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                        ) -> 'items':
                                                            return super().__new__(
                                                                cls,
                                                                *args,
                                                                description=description,
                                                                source=source,
                                                                type=type,
                                                                _configuration=_configuration,
                                                            )
                                            
                                                def __new__(
                                                    cls,
                                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'weaknesses':
                                                    return super().__new__(
                                                        cls,
                                                        arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class configurations(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    
                                                    class items(
                                                        schemas.DictSchema
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            required = {
                                                                "nodes",
                                                            }
                                                            
                                                            class properties:
                                                                
                                                                
                                                                class operator(
                                                                    schemas.EnumBase,
                                                                    schemas.StrSchema
                                                                ):
                                                                
                                                                
                                                                    class MetaOapg:
                                                                        enum_value_to_name = {
                                                                            "AND": "AND",
                                                                            "OR": "OR",
                                                                        }
                                                                    
                                                                    @schemas.classproperty
                                                                    def AND(cls):
                                                                        return cls("AND")
                                                                    
                                                                    @schemas.classproperty
                                                                    def OR(cls):
                                                                        return cls("OR")
                                                                negate = schemas.BoolSchema
                                                                
                                                                
                                                                class nodes(
                                                                    schemas.ListSchema
                                                                ):
                                                                
                                                                
                                                                    class MetaOapg:
                                                                        
                                                                        
                                                                        class items(
                                                                            schemas.DictSchema
                                                                        ):
                                                                        
                                                                        
                                                                            class MetaOapg:
                                                                                required = {
                                                                                    "operator",
                                                                                    "cpeMatch",
                                                                                }
                                                                                
                                                                                class properties:
                                                                                    
                                                                                    
                                                                                    class operator(
                                                                                        schemas.EnumBase,
                                                                                        schemas.StrSchema
                                                                                    ):
                                                                                    
                                                                                    
                                                                                        class MetaOapg:
                                                                                            enum_value_to_name = {
                                                                                                "AND": "AND",
                                                                                                "OR": "OR",
                                                                                            }
                                                                                        
                                                                                        @schemas.classproperty
                                                                                        def AND(cls):
                                                                                            return cls("AND")
                                                                                        
                                                                                        @schemas.classproperty
                                                                                        def OR(cls):
                                                                                            return cls("OR")
                                                                                    negate = schemas.BoolSchema
                                                                                    
                                                                                    
                                                                                    class cpeMatch(
                                                                                        schemas.ListSchema
                                                                                    ):
                                                                                    
                                                                                    
                                                                                        class MetaOapg:
                                                                                            
                                                                                            
                                                                                            class items(
                                                                                                schemas.DictSchema
                                                                                            ):
                                                                                            
                                                                                            
                                                                                                class MetaOapg:
                                                                                                    required = {
                                                                                                        "vulnerable",
                                                                                                        "criteria",
                                                                                                        "matchCriteriaId",
                                                                                                    }
                                                                                                    
                                                                                                    class properties:
                                                                                                        vulnerable = schemas.BoolSchema
                                                                                                        criteria = schemas.StrSchema
                                                                                                        matchCriteriaId = schemas.UUIDSchema
                                                                                                        versionStartExcluding = schemas.StrSchema
                                                                                                        versionStartIncluding = schemas.StrSchema
                                                                                                        versionEndExcluding = schemas.StrSchema
                                                                                                        versionEndIncluding = schemas.StrSchema
                                                                                                        __annotations__ = {
                                                                                                            "vulnerable": vulnerable,
                                                                                                            "criteria": criteria,
                                                                                                            "matchCriteriaId": matchCriteriaId,
                                                                                                            "versionStartExcluding": versionStartExcluding,
                                                                                                            "versionStartIncluding": versionStartIncluding,
                                                                                                            "versionEndExcluding": versionEndExcluding,
                                                                                                            "versionEndIncluding": versionEndIncluding,
                                                                                                        }
                                                                                                    additional_properties = schemas.NotAnyTypeSchema
                                                                                                
                                                                                                vulnerable: MetaOapg.properties.vulnerable
                                                                                                criteria: MetaOapg.properties.criteria
                                                                                                matchCriteriaId: MetaOapg.properties.matchCriteriaId
                                                                                                
                                                                                                @typing.overload
                                                                                                def __getitem__(self, name: typing_extensions.Literal["vulnerable"]) -> MetaOapg.properties.vulnerable: ...
                                                                                                
                                                                                                @typing.overload
                                                                                                def __getitem__(self, name: typing_extensions.Literal["criteria"]) -> MetaOapg.properties.criteria: ...
                                                                                                
                                                                                                @typing.overload
                                                                                                def __getitem__(self, name: typing_extensions.Literal["matchCriteriaId"]) -> MetaOapg.properties.matchCriteriaId: ...
                                                                                                
                                                                                                @typing.overload
                                                                                                def __getitem__(self, name: typing_extensions.Literal["versionStartExcluding"]) -> MetaOapg.properties.versionStartExcluding: ...
                                                                                                
                                                                                                @typing.overload
                                                                                                def __getitem__(self, name: typing_extensions.Literal["versionStartIncluding"]) -> MetaOapg.properties.versionStartIncluding: ...
                                                                                                
                                                                                                @typing.overload
                                                                                                def __getitem__(self, name: typing_extensions.Literal["versionEndExcluding"]) -> MetaOapg.properties.versionEndExcluding: ...
                                                                                                
                                                                                                @typing.overload
                                                                                                def __getitem__(self, name: typing_extensions.Literal["versionEndIncluding"]) -> MetaOapg.properties.versionEndIncluding: ...
                                                                                                
                                                                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["vulnerable"], typing_extensions.Literal["criteria"], typing_extensions.Literal["matchCriteriaId"], typing_extensions.Literal["versionStartExcluding"], typing_extensions.Literal["versionStartIncluding"], typing_extensions.Literal["versionEndExcluding"], typing_extensions.Literal["versionEndIncluding"], ]):
                                                                                                    # dict_instance[name] accessor
                                                                                                    return super().__getitem__(name)
                                                                                                
                                                                                                @typing.overload
                                                                                                def get_item_oapg(self, name: typing_extensions.Literal["vulnerable"]) -> MetaOapg.properties.vulnerable: ...
                                                                                                
                                                                                                @typing.overload
                                                                                                def get_item_oapg(self, name: typing_extensions.Literal["criteria"]) -> MetaOapg.properties.criteria: ...
                                                                                                
                                                                                                @typing.overload
                                                                                                def get_item_oapg(self, name: typing_extensions.Literal["matchCriteriaId"]) -> MetaOapg.properties.matchCriteriaId: ...
                                                                                                
                                                                                                @typing.overload
                                                                                                def get_item_oapg(self, name: typing_extensions.Literal["versionStartExcluding"]) -> typing.Union[MetaOapg.properties.versionStartExcluding, schemas.Unset]: ...
                                                                                                
                                                                                                @typing.overload
                                                                                                def get_item_oapg(self, name: typing_extensions.Literal["versionStartIncluding"]) -> typing.Union[MetaOapg.properties.versionStartIncluding, schemas.Unset]: ...
                                                                                                
                                                                                                @typing.overload
                                                                                                def get_item_oapg(self, name: typing_extensions.Literal["versionEndExcluding"]) -> typing.Union[MetaOapg.properties.versionEndExcluding, schemas.Unset]: ...
                                                                                                
                                                                                                @typing.overload
                                                                                                def get_item_oapg(self, name: typing_extensions.Literal["versionEndIncluding"]) -> typing.Union[MetaOapg.properties.versionEndIncluding, schemas.Unset]: ...
                                                                                                
                                                                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["vulnerable"], typing_extensions.Literal["criteria"], typing_extensions.Literal["matchCriteriaId"], typing_extensions.Literal["versionStartExcluding"], typing_extensions.Literal["versionStartIncluding"], typing_extensions.Literal["versionEndExcluding"], typing_extensions.Literal["versionEndIncluding"], ]):
                                                                                                    return super().get_item_oapg(name)
                                                                                            
                                                                                                def __new__(
                                                                                                    cls,
                                                                                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                                                                                    vulnerable: typing.Union[MetaOapg.properties.vulnerable, bool, ],
                                                                                                    criteria: typing.Union[MetaOapg.properties.criteria, str, ],
                                                                                                    matchCriteriaId: typing.Union[MetaOapg.properties.matchCriteriaId, str, uuid.UUID, ],
                                                                                                    versionStartExcluding: typing.Union[MetaOapg.properties.versionStartExcluding, str, schemas.Unset] = schemas.unset,
                                                                                                    versionStartIncluding: typing.Union[MetaOapg.properties.versionStartIncluding, str, schemas.Unset] = schemas.unset,
                                                                                                    versionEndExcluding: typing.Union[MetaOapg.properties.versionEndExcluding, str, schemas.Unset] = schemas.unset,
                                                                                                    versionEndIncluding: typing.Union[MetaOapg.properties.versionEndIncluding, str, schemas.Unset] = schemas.unset,
                                                                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                                ) -> 'items':
                                                                                                    return super().__new__(
                                                                                                        cls,
                                                                                                        *args,
                                                                                                        vulnerable=vulnerable,
                                                                                                        criteria=criteria,
                                                                                                        matchCriteriaId=matchCriteriaId,
                                                                                                        versionStartExcluding=versionStartExcluding,
                                                                                                        versionStartIncluding=versionStartIncluding,
                                                                                                        versionEndExcluding=versionEndExcluding,
                                                                                                        versionEndIncluding=versionEndIncluding,
                                                                                                        _configuration=_configuration,
                                                                                                    )
                                                                                    
                                                                                        def __new__(
                                                                                            cls,
                                                                                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                        ) -> 'cpeMatch':
                                                                                            return super().__new__(
                                                                                                cls,
                                                                                                arg,
                                                                                                _configuration=_configuration,
                                                                                            )
                                                                                    
                                                                                        def __getitem__(self, i: int) -> MetaOapg.items:
                                                                                            return super().__getitem__(i)
                                                                                    __annotations__ = {
                                                                                        "operator": operator,
                                                                                        "negate": negate,
                                                                                        "cpeMatch": cpeMatch,
                                                                                    }
                                                                                additional_properties = schemas.NotAnyTypeSchema
                                                                            
                                                                            operator: MetaOapg.properties.operator
                                                                            cpeMatch: MetaOapg.properties.cpeMatch
                                                                            
                                                                            @typing.overload
                                                                            def __getitem__(self, name: typing_extensions.Literal["operator"]) -> MetaOapg.properties.operator: ...
                                                                            
                                                                            @typing.overload
                                                                            def __getitem__(self, name: typing_extensions.Literal["cpeMatch"]) -> MetaOapg.properties.cpeMatch: ...
                                                                            
                                                                            @typing.overload
                                                                            def __getitem__(self, name: typing_extensions.Literal["negate"]) -> MetaOapg.properties.negate: ...
                                                                            
                                                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["operator"], typing_extensions.Literal["cpeMatch"], typing_extensions.Literal["negate"], ]):
                                                                                # dict_instance[name] accessor
                                                                                return super().__getitem__(name)
                                                                            
                                                                            @typing.overload
                                                                            def get_item_oapg(self, name: typing_extensions.Literal["operator"]) -> MetaOapg.properties.operator: ...
                                                                            
                                                                            @typing.overload
                                                                            def get_item_oapg(self, name: typing_extensions.Literal["cpeMatch"]) -> MetaOapg.properties.cpeMatch: ...
                                                                            
                                                                            @typing.overload
                                                                            def get_item_oapg(self, name: typing_extensions.Literal["negate"]) -> typing.Union[MetaOapg.properties.negate, schemas.Unset]: ...
                                                                            
                                                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["operator"], typing_extensions.Literal["cpeMatch"], typing_extensions.Literal["negate"], ]):
                                                                                return super().get_item_oapg(name)
                                                                        
                                                                            def __new__(
                                                                                cls,
                                                                                *args: typing.Union[dict, frozendict.frozendict, ],
                                                                                operator: typing.Union[MetaOapg.properties.operator, str, ],
                                                                                cpeMatch: typing.Union[MetaOapg.properties.cpeMatch, list, tuple, ],
                                                                                negate: typing.Union[MetaOapg.properties.negate, bool, schemas.Unset] = schemas.unset,
                                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                                            ) -> 'items':
                                                                                return super().__new__(
                                                                                    cls,
                                                                                    *args,
                                                                                    operator=operator,
                                                                                    cpeMatch=cpeMatch,
                                                                                    negate=negate,
                                                                                    _configuration=_configuration,
                                                                                )
                                                                
                                                                    def __new__(
                                                                        cls,
                                                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                                    ) -> 'nodes':
                                                                        return super().__new__(
                                                                            cls,
                                                                            arg,
                                                                            _configuration=_configuration,
                                                                        )
                                                                
                                                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                                                        return super().__getitem__(i)
                                                                __annotations__ = {
                                                                    "operator": operator,
                                                                    "negate": negate,
                                                                    "nodes": nodes,
                                                                }
                                                            additional_properties = schemas.NotAnyTypeSchema
                                                        
                                                        nodes: MetaOapg.properties.nodes
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["nodes"]) -> MetaOapg.properties.nodes: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["operator"]) -> MetaOapg.properties.operator: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["negate"]) -> MetaOapg.properties.negate: ...
                                                        
                                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["nodes"], typing_extensions.Literal["operator"], typing_extensions.Literal["negate"], ]):
                                                            # dict_instance[name] accessor
                                                            return super().__getitem__(name)
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["nodes"]) -> MetaOapg.properties.nodes: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["operator"]) -> typing.Union[MetaOapg.properties.operator, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["negate"]) -> typing.Union[MetaOapg.properties.negate, schemas.Unset]: ...
                                                        
                                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["nodes"], typing_extensions.Literal["operator"], typing_extensions.Literal["negate"], ]):
                                                            return super().get_item_oapg(name)
                                                    
                                                        def __new__(
                                                            cls,
                                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                                            nodes: typing.Union[MetaOapg.properties.nodes, list, tuple, ],
                                                            operator: typing.Union[MetaOapg.properties.operator, str, schemas.Unset] = schemas.unset,
                                                            negate: typing.Union[MetaOapg.properties.negate, bool, schemas.Unset] = schemas.unset,
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                        ) -> 'items':
                                                            return super().__new__(
                                                                cls,
                                                                *args,
                                                                nodes=nodes,
                                                                operator=operator,
                                                                negate=negate,
                                                                _configuration=_configuration,
                                                            )
                                            
                                                def __new__(
                                                    cls,
                                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'configurations':
                                                    return super().__new__(
                                                        cls,
                                                        arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class vendorComments(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    
                                                    class items(
                                                        schemas.DictSchema
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            required = {
                                                                "organization",
                                                                "comment",
                                                                "lastModified",
                                                            }
                                                            
                                                            class properties:
                                                                organization = schemas.StrSchema
                                                                comment = schemas.StrSchema
                                                                lastModified = schemas.DateTimeSchema
                                                                __annotations__ = {
                                                                    "organization": organization,
                                                                    "comment": comment,
                                                                    "lastModified": lastModified,
                                                                }
                                                            additional_properties = schemas.NotAnyTypeSchema
                                                        
                                                        organization: MetaOapg.properties.organization
                                                        comment: MetaOapg.properties.comment
                                                        lastModified: MetaOapg.properties.lastModified
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["organization"]) -> MetaOapg.properties.organization: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["comment"]) -> MetaOapg.properties.comment: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["lastModified"]) -> MetaOapg.properties.lastModified: ...
                                                        
                                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["organization"], typing_extensions.Literal["comment"], typing_extensions.Literal["lastModified"], ]):
                                                            # dict_instance[name] accessor
                                                            return super().__getitem__(name)
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["organization"]) -> MetaOapg.properties.organization: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["comment"]) -> MetaOapg.properties.comment: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["lastModified"]) -> MetaOapg.properties.lastModified: ...
                                                        
                                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["organization"], typing_extensions.Literal["comment"], typing_extensions.Literal["lastModified"], ]):
                                                            return super().get_item_oapg(name)
                                                    
                                                        def __new__(
                                                            cls,
                                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                                            organization: typing.Union[MetaOapg.properties.organization, str, ],
                                                            comment: typing.Union[MetaOapg.properties.comment, str, ],
                                                            lastModified: typing.Union[MetaOapg.properties.lastModified, str, datetime, ],
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                        ) -> 'items':
                                                            return super().__new__(
                                                                cls,
                                                                *args,
                                                                organization=organization,
                                                                comment=comment,
                                                                lastModified=lastModified,
                                                                _configuration=_configuration,
                                                            )
                                            
                                                def __new__(
                                                    cls,
                                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'vendorComments':
                                                    return super().__new__(
                                                        cls,
                                                        arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            __annotations__ = {
                                                "id": id,
                                                "sourceIdentifier": sourceIdentifier,
                                                "vulnStatus": vulnStatus,
                                                "published": published,
                                                "lastModified": lastModified,
                                                "evaluatorComment": evaluatorComment,
                                                "evaluatorSolution": evaluatorSolution,
                                                "evaluatorImpact": evaluatorImpact,
                                                "cisaExploitAdd": cisaExploitAdd,
                                                "cisaActionDue": cisaActionDue,
                                                "cisaRequiredAction": cisaRequiredAction,
                                                "cisaVulnerabilityName": cisaVulnerabilityName,
                                                "descriptions": descriptions,
                                                "references": references,
                                                "metrics": metrics,
                                                "weaknesses": weaknesses,
                                                "configurations": configurations,
                                                "vendorComments": vendorComments,
                                            }
                                        additional_properties = schemas.NotAnyTypeSchema
                                    
                                    references: MetaOapg.properties.references
                                    descriptions: MetaOapg.properties.descriptions
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["references"]) -> MetaOapg.properties.references: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["descriptions"]) -> MetaOapg.properties.descriptions: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["sourceIdentifier"]) -> MetaOapg.properties.sourceIdentifier: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["vulnStatus"]) -> MetaOapg.properties.vulnStatus: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["published"]) -> MetaOapg.properties.published: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["lastModified"]) -> MetaOapg.properties.lastModified: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["evaluatorComment"]) -> MetaOapg.properties.evaluatorComment: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["evaluatorSolution"]) -> MetaOapg.properties.evaluatorSolution: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["evaluatorImpact"]) -> MetaOapg.properties.evaluatorImpact: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["cisaExploitAdd"]) -> MetaOapg.properties.cisaExploitAdd: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["cisaActionDue"]) -> MetaOapg.properties.cisaActionDue: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["cisaRequiredAction"]) -> MetaOapg.properties.cisaRequiredAction: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["cisaVulnerabilityName"]) -> MetaOapg.properties.cisaVulnerabilityName: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["metrics"]) -> MetaOapg.properties.metrics: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["weaknesses"]) -> MetaOapg.properties.weaknesses: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["configurations"]) -> MetaOapg.properties.configurations: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["vendorComments"]) -> MetaOapg.properties.vendorComments: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["references"], typing_extensions.Literal["descriptions"], typing_extensions.Literal["id"], typing_extensions.Literal["sourceIdentifier"], typing_extensions.Literal["vulnStatus"], typing_extensions.Literal["published"], typing_extensions.Literal["lastModified"], typing_extensions.Literal["evaluatorComment"], typing_extensions.Literal["evaluatorSolution"], typing_extensions.Literal["evaluatorImpact"], typing_extensions.Literal["cisaExploitAdd"], typing_extensions.Literal["cisaActionDue"], typing_extensions.Literal["cisaRequiredAction"], typing_extensions.Literal["cisaVulnerabilityName"], typing_extensions.Literal["metrics"], typing_extensions.Literal["weaknesses"], typing_extensions.Literal["configurations"], typing_extensions.Literal["vendorComments"], ]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["references"]) -> MetaOapg.properties.references: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["descriptions"]) -> MetaOapg.properties.descriptions: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["sourceIdentifier"]) -> typing.Union[MetaOapg.properties.sourceIdentifier, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["vulnStatus"]) -> typing.Union[MetaOapg.properties.vulnStatus, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["published"]) -> typing.Union[MetaOapg.properties.published, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["lastModified"]) -> typing.Union[MetaOapg.properties.lastModified, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["evaluatorComment"]) -> typing.Union[MetaOapg.properties.evaluatorComment, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["evaluatorSolution"]) -> typing.Union[MetaOapg.properties.evaluatorSolution, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["evaluatorImpact"]) -> typing.Union[MetaOapg.properties.evaluatorImpact, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["cisaExploitAdd"]) -> typing.Union[MetaOapg.properties.cisaExploitAdd, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["cisaActionDue"]) -> typing.Union[MetaOapg.properties.cisaActionDue, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["cisaRequiredAction"]) -> typing.Union[MetaOapg.properties.cisaRequiredAction, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["cisaVulnerabilityName"]) -> typing.Union[MetaOapg.properties.cisaVulnerabilityName, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["metrics"]) -> typing.Union[MetaOapg.properties.metrics, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["weaknesses"]) -> typing.Union[MetaOapg.properties.weaknesses, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["configurations"]) -> typing.Union[MetaOapg.properties.configurations, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["vendorComments"]) -> typing.Union[MetaOapg.properties.vendorComments, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["references"], typing_extensions.Literal["descriptions"], typing_extensions.Literal["id"], typing_extensions.Literal["sourceIdentifier"], typing_extensions.Literal["vulnStatus"], typing_extensions.Literal["published"], typing_extensions.Literal["lastModified"], typing_extensions.Literal["evaluatorComment"], typing_extensions.Literal["evaluatorSolution"], typing_extensions.Literal["evaluatorImpact"], typing_extensions.Literal["cisaExploitAdd"], typing_extensions.Literal["cisaActionDue"], typing_extensions.Literal["cisaRequiredAction"], typing_extensions.Literal["cisaVulnerabilityName"], typing_extensions.Literal["metrics"], typing_extensions.Literal["weaknesses"], typing_extensions.Literal["configurations"], typing_extensions.Literal["vendorComments"], ]):
                                        return super().get_item_oapg(name)
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        references: typing.Union[MetaOapg.properties.references, list, tuple, ],
                                        descriptions: typing.Union[MetaOapg.properties.descriptions, list, tuple, ],
                                        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                                        sourceIdentifier: typing.Union[MetaOapg.properties.sourceIdentifier, str, schemas.Unset] = schemas.unset,
                                        vulnStatus: typing.Union[MetaOapg.properties.vulnStatus, str, schemas.Unset] = schemas.unset,
                                        published: typing.Union[MetaOapg.properties.published, str, datetime, schemas.Unset] = schemas.unset,
                                        lastModified: typing.Union[MetaOapg.properties.lastModified, str, datetime, schemas.Unset] = schemas.unset,
                                        evaluatorComment: typing.Union[MetaOapg.properties.evaluatorComment, str, schemas.Unset] = schemas.unset,
                                        evaluatorSolution: typing.Union[MetaOapg.properties.evaluatorSolution, str, schemas.Unset] = schemas.unset,
                                        evaluatorImpact: typing.Union[MetaOapg.properties.evaluatorImpact, str, schemas.Unset] = schemas.unset,
                                        cisaExploitAdd: typing.Union[MetaOapg.properties.cisaExploitAdd, str, date, schemas.Unset] = schemas.unset,
                                        cisaActionDue: typing.Union[MetaOapg.properties.cisaActionDue, str, date, schemas.Unset] = schemas.unset,
                                        cisaRequiredAction: typing.Union[MetaOapg.properties.cisaRequiredAction, str, schemas.Unset] = schemas.unset,
                                        cisaVulnerabilityName: typing.Union[MetaOapg.properties.cisaVulnerabilityName, str, schemas.Unset] = schemas.unset,
                                        metrics: typing.Union[MetaOapg.properties.metrics, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                        weaknesses: typing.Union[MetaOapg.properties.weaknesses, list, tuple, schemas.Unset] = schemas.unset,
                                        configurations: typing.Union[MetaOapg.properties.configurations, list, tuple, schemas.Unset] = schemas.unset,
                                        vendorComments: typing.Union[MetaOapg.properties.vendorComments, list, tuple, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'cve':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            references=references,
                                            descriptions=descriptions,
                                            id=id,
                                            sourceIdentifier=sourceIdentifier,
                                            vulnStatus=vulnStatus,
                                            published=published,
                                            lastModified=lastModified,
                                            evaluatorComment=evaluatorComment,
                                            evaluatorSolution=evaluatorSolution,
                                            evaluatorImpact=evaluatorImpact,
                                            cisaExploitAdd=cisaExploitAdd,
                                            cisaActionDue=cisaActionDue,
                                            cisaRequiredAction=cisaRequiredAction,
                                            cisaVulnerabilityName=cisaVulnerabilityName,
                                            metrics=metrics,
                                            weaknesses=weaknesses,
                                            configurations=configurations,
                                            vendorComments=vendorComments,
                                            _configuration=_configuration,
                                        )
                                __annotations__ = {
                                    "cve": cve,
                                }
                            additional_properties = schemas.NotAnyTypeSchema
                        
                        cve: MetaOapg.properties.cve
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["cve"]) -> MetaOapg.properties.cve: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["cve"], ]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["cve"]) -> MetaOapg.properties.cve: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cve"], ]):
                            return super().get_item_oapg(name)
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            cve: typing.Union[MetaOapg.properties.cve, dict, frozendict.frozendict, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                cve=cve,
                                _configuration=_configuration,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'vulnerabilities':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "resultsPerPage": resultsPerPage,
                "startIndex": startIndex,
                "totalResults": totalResults,
                "format": format,
                "version": version,
                "timestamp": timestamp,
                "vulnerabilities": vulnerabilities,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    startIndex: MetaOapg.properties.startIndex
    totalResults: MetaOapg.properties.totalResults
    resultsPerPage: MetaOapg.properties.resultsPerPage
    format: MetaOapg.properties.format
    vulnerabilities: MetaOapg.properties.vulnerabilities
    version: MetaOapg.properties.version
    timestamp: MetaOapg.properties.timestamp
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startIndex"]) -> MetaOapg.properties.startIndex: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalResults"]) -> MetaOapg.properties.totalResults: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resultsPerPage"]) -> MetaOapg.properties.resultsPerPage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["format"]) -> MetaOapg.properties.format: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vulnerabilities"]) -> MetaOapg.properties.vulnerabilities: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["startIndex"], typing_extensions.Literal["totalResults"], typing_extensions.Literal["resultsPerPage"], typing_extensions.Literal["format"], typing_extensions.Literal["vulnerabilities"], typing_extensions.Literal["version"], typing_extensions.Literal["timestamp"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startIndex"]) -> MetaOapg.properties.startIndex: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalResults"]) -> MetaOapg.properties.totalResults: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resultsPerPage"]) -> MetaOapg.properties.resultsPerPage: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["format"]) -> MetaOapg.properties.format: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vulnerabilities"]) -> MetaOapg.properties.vulnerabilities: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["startIndex"], typing_extensions.Literal["totalResults"], typing_extensions.Literal["resultsPerPage"], typing_extensions.Literal["format"], typing_extensions.Literal["vulnerabilities"], typing_extensions.Literal["version"], typing_extensions.Literal["timestamp"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        startIndex: typing.Union[MetaOapg.properties.startIndex, decimal.Decimal, int, ],
        totalResults: typing.Union[MetaOapg.properties.totalResults, decimal.Decimal, int, ],
        resultsPerPage: typing.Union[MetaOapg.properties.resultsPerPage, decimal.Decimal, int, ],
        format: typing.Union[MetaOapg.properties.format, str, ],
        vulnerabilities: typing.Union[MetaOapg.properties.vulnerabilities, list, tuple, ],
        version: typing.Union[MetaOapg.properties.version, str, ],
        timestamp: typing.Union[MetaOapg.properties.timestamp, str, datetime, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CveOas':
        return super().__new__(
            cls,
            *args,
            startIndex=startIndex,
            totalResults=totalResults,
            resultsPerPage=resultsPerPage,
            format=format,
            vulnerabilities=vulnerabilities,
            version=version,
            timestamp=timestamp,
            _configuration=_configuration,
        )

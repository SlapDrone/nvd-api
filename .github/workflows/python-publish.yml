name: Python Publish

on:
  workflow_dispatch: # for debug
  push:
    branches: [main]
    tags:
      - v*.*.*

permissions: read-all

jobs:
  release:
    runs-on: ubuntu-latest
    if: ${{ github.ref_name != 'main' }}
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c

      - name: Create Release
        id: create_release
        uses: actions/create-release@0cb9c9b65d5d1901c1f53e5e66eaf4afd303e70e
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Setup python environment
        uses: ./.github/actions/python-setup

      - name: Build package
        id: build
        run: |
          poetry run sbom
          poetry build
          echo "::set-output name=package_tar::`ls dist/ | grep .tar.gz`"
          echo "::set-output name=package_whl::`ls dist/ | grep .whl`"

      - name: Upload package to artifact
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce
        with:
          name: package
          path: dist/

      - name: Upload package to release asset
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/${{ steps.build.outputs.package_tar }}
          asset_name: ${{ steps.build.outputs.package_tar }}
          asset_content_type: application/zip

      - name: Upload package to release asset
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/${{ steps.build.outputs.package_whl }}
          asset_name: ${{ steps.build.outputs.package_whl }}
          asset_content_type: application/zip

      - name: Upload package to pypi
        uses: pypa/gh-action-pypi-publish@c7f29f7adef1a245bd91520e94867e5c6eedddcc
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

  pages:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c

      - name: Setup python environment
        uses: ./.github/actions/python-setup

      - name: Generate sphinx
        run: poetry run sphinx

      - name: Setup Pages
        uses: actions/configure-pages@5992ce8fd557229bb0e98f78a89136a149cc9758

      - name: Upload artifact
        uses: actions/upload-pages-artifact@253fd476ed429e83b7aae64a92a75b4ceb1a17cf
        with:
          path: 'public'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@20a4baa1095bad40ba7d6ca0d9abbc220b76603f


  # pages:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: write
  #     pages: write
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c

  #     - name: Setup python environment
  #       uses: ./.github/actions/python-setup

  #     - name: Generate sphinx
  #       run: poetry run sphinx

  #     - name: Publish API document to GitHub pages
  #       uses: crazy-max/ghaction-github-pages@c0d7ff0487ee0415efb7f32dab10ea880330b1dd
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         target_branch: gh-pages
  #         build_dir: public/
